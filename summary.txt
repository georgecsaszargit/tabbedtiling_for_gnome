===== FILE: ./schemas/gschemas.compiled =====
[BINARY FILE]



===== FILE: ./schemas/org.gnome.shell.extensions.autozoner.gschema.xml =====
<?xml version="1.0" encoding="UTF-8"?>
<schemalist gettext-domain="gnome-shell-extensions">
  <schema path="/org/gnome/shell/extensions/autozoner/" id="org.gnome.shell.extensions.autozoner">
    <key name="enable-auto-zoning" type="b">
      <default>true</default>
      <summary>Enable Auto Zoning</summary>
      <description>Automatically tile windows when moved into a defined zone.</description>
    </key>

    <key name="zones" type="s">
      <default>'[]'</default>
      <summary>Zone Definitions</summary>
      <description>A JSON string representing an array of zone objects.</description>
    </key>

    <key name="restore-original-size-on-untile" type="b">
      <default>true</default>
      <summary>Restore Original Size</summary>
      <description>When a window leaves all zones, restore its previous size/position.</description>
    </key>

    <key name="tile-new-windows" type="b">
      <default>true</default>
      <summary>Tile New Windows</summary>
      <description>Automatically tile newly opened windows if they fall into a zone.</description>
    </key>

    <key name="highlight-on-hover" type="b">
      <default>true</default>
      <summary>Highlight Zone on Hover</summary>
      <description>Visually highlight a zone when dragging a window over it.</description>
    </key>

    <key name="cycle-zone-windows-accelerator" type="as">
      <default>['&lt;Control&gt;&lt;Alt&gt;8']</default>
      <summary>Cycle Windows Forward</summary>
      <description>Keyboard shortcut to loop focus forward through windows in the active zone.</description>
    </key>

    <key name="cycle-zone-windows-backward-accelerator" type="as">
      <default>['&lt;Control&gt;&lt;Alt&gt;9']</default>
      <summary>Cycle Windows Backward</summary>
      <description>Keyboard shortcut to loop focus backward through windows in the active zone.</description>
    </key>

    <key name="tab-bar-height" type="i">
      <default>32</default>
      <summary>Tab Bar Height</summary>
      <description>Height in pixels of the tab bar.</description>
    </key>

    <key name="tab-font-size" type="i">
      <default>13</default>
      <summary>Tab Font Size</summary>
      <description>Font size in pixels for the tab labels.</description>
    </key>

    <key name="zone-gap-size" type="i">
      <default>5</default>
      <summary>Zone Gap Size</summary>
      <description>Pixel size of the gap around and between window zones. Set to 0 to disable gaps. Changes may require a re-snap of windows.</description>
    </key>

    <key name="tab-icon-size" type="i">
      <default>24</default>
      <summary>Tab Icon Size</summary>
      <description>Size in pixels for the application icon in tabs.</description>
    </key>

    <key name="tab-corner-radius" type="i">
      <default>4</default>
      <summary>Tab Corner Radius</summary>
      <description>Corner radius in pixels for individual tabs. Affects the top corners.</description>
    </key>

    <key name="tab-close-button-icon-size" type="i">
      <default>18</default>
      <summary>Tab Close Button Icon Size</summary>
      <description>Size in pixels for the close button icon within tabs.</description>
    </key>

    <key name="tab-spacing" type="i">
      <default>20</default>
      <summary>Tab Spacing</summary>
      <description>Gap in pixels between individual tabs in the tab bar.</description>
    </key>

    <key name="tab-min-width" type="i">
      <default>80</default>
      <summary>Tab Minimum Width</summary>
      <description>Minimum width in pixels for an individual tab.</description>
    </key>

    <key name="tab-max-width" type="i">
      <default>180</default>
      <summary>Tab Maximum Width</summary>
      <description>Maximum width in pixels for an individual tab.</description>
    </key>

    <key name="snap-evasion-key" type="s">
      <default>'control'</default>
      <summary>Snap Evasion Key</summary>
      <description>Hold this key while dragging a window to temporarily prevent snapping to zones.</description>
      <choices>
        <choice value='disabled'/>
        <choice value='control'/>
        <choice value='alt'/>
        <choice value='shift'/>
        <choice value='super'/>
      </choices>
    </key>

  </schema>
</schemalist>



===== FILE: ./metadata.json =====
{
  "name": "Auto Zoner",
  "description": "Automatically tiles windows into predefined screen zones.",
  "uuid": "autozoner@georgecs.com",
  "shell-version": ["45", "46", "47", "48"],
  "version": 1,
  "gettext-domain": "autozoner",
  "settings-schema": "org.gnome.shell.extensions.autozoner",
  "url": "https://github.com/your-username/autozoner"
}



===== FILE: ./extension.js =====
// extension.js

import { Extension } from 'resource:///org/gnome/shell/extensions/extension.js'; // [cite: 9]
import * as Main from 'resource:///org/gnome/shell/ui/main.js'; // [cite: 9]
import Meta from 'gi://Meta'; // [cite: 9]
import Shell from 'gi://Shell'; // [cite: 10]
import GLib from 'gi://GLib'; // [cite: 10]
import Gio from 'gi://Gio'; // [cite: 10]

import { SettingsManager } from './modules/SettingsManager.js'; // [cite: 10]
import { HighlightManager } from './modules/HighlightManager.js'; // [cite: 11]
import { WindowManager } from './modules/WindowManager.js'; // [cite: 11]
import { Indicator } from './modules/Indicator.js'; // [cite: 11]
const ENABLE_ZONING_KEY = 'enable-auto-zoning'; // [cite: 12]
const CYCLE_ACCELERATOR_KEY = 'cycle-zone-windows-accelerator'; // [cite: 12]
const CYCLE_BACKWARD_ACCELERATOR_KEY = 'cycle-zone-windows-backward-accelerator'; // [cite: 12]
const ZONE_GAP_SIZE_KEY = 'zone-gap-size'; // [cite: 12]
const TAB_BAR_HEIGHT_KEY = 'tab-bar-height'; // [cite: 12]
// New Tab Bar Adjustment Keys (ensure these match gschema and SettingsManager) // [cite: 13]
const TAB_ICON_SIZE_KEY = 'tab-icon-size'; // [cite: 13]
const TAB_CORNER_RADIUS_KEY = 'tab-corner-radius'; // [cite: 13]
const TAB_CLOSE_BUTTON_ICON_SIZE_KEY = 'tab-close-button-icon-size'; // [cite: 14]
const TAB_SPACING_KEY = 'tab-spacing'; // [cite: 14]
const TAB_MIN_WIDTH_KEY = 'tab-min-width'; // [cite: 14]
const TAB_MAX_WIDTH_KEY = 'tab-max-width'; // [cite: 14]
const TAB_FONT_SIZE_KEY = 'tab-font-size'; // [cite: 14]
// Already existed but good to have with other tab keys // [cite: 15]

const log = msg => console.log(`[AutoZoner.Main] ${msg}`); // [cite: 15]
const SessionManagerIface = `
<node>
    <interface name="org.gnome.SessionManager">
        <signal name="Resumed" />
    </interface>
</node>`; // [cite: 16]
const SessionManagerProxy = Gio.DBusProxy.makeProxyWrapper(SessionManagerIface); // [cite: 17]

export default class AutoZonerExtension extends Extension {
    constructor(metadata) {
        super(metadata); // [cite: 17]
        this._settingsManager = null; // [cite: 18]
        this._highlightManager = null; // [cite: 18]
        this._windowManager = null; // [cite: 18]
        this._indicator = null; // [cite: 18]
        this._monitorsChangedId = 0; // [cite: 18]
        this._snapOnMonitorsChangedTimeoutId = 0; // [cite: 18]
        this._zoningChangedId = 0; // [cite: 19]
        this._cycleAccelChangedId = 0; // [cite: 19]
        this._cycleBackwardAccelChangedId = 0; // [cite: 19]
        this._zoneGapChangedId = 0; // [cite: 19]
        this._tabBarHeightChangedId = 0; // [cite: 19]
        this._tabFontSizeChangedId = 0; // [cite: 19]
        // For completeness if dynamic changes are needed // [cite: 20]

        // IDs for new tab settings signals
        this._tabIconSizeChangedId = 0; // [cite: 20]
        this._tabCornerRadiusChangedId = 0; // [cite: 21]
        this._tabCloseButtonIconSizeChangedId = 0; // [cite: 21]
        this._tabSpacingChangedId = 0; // [cite: 21]
        this._tabMinWidthChangedId = 0; // [cite: 21]
        this._tabMaxWidthChangedId = 0; // [cite: 21]

        this._sessionProxy = null; // [cite: 21]
        this._sessionResumedSignalId = 0; // [cite: 22]
        this._snapOnResumeTimeoutId = 0; // [cite: 22]
    }

    _performDelayedSnap(reason = "unknown change") {
        if (this._settingsManager && this._settingsManager.isZoningEnabled() && this._windowManager) { // [cite: 22]
            log(`Re-snapping windows due to: ${reason}`); // [cite: 22]
            this._windowManager.snapAllWindowsToZones(); // [cite: 23]
        }
    }

    _updateAllTabsAppearance(reason = "unknown tab setting change") {
        log(`Updating tab appearances due to: ${reason}`); // [cite: 23]
        if (this._settingsManager && this._settingsManager.isZoningEnabled() && this._windowManager) { // [cite: 24]
            this._windowManager.updateAllTabAppearances(); // [cite: 24]
        }
    }

    enable() {
        log('Enabling…'); // [cite: 25]
        this._settingsManager = new SettingsManager(this.getSettings(), this.path); // [cite: 26]
        this._highlightManager = new HighlightManager(this._settingsManager); // [cite: 26]
        this._windowManager = new WindowManager(this._settingsManager, this._highlightManager); // [cite: 26]
        this._indicator = new Indicator(this.uuid, this._settingsManager, this); // [cite: 26]
        this._windowManager.connectSignals(); // [cite: 27]
        if (this._settingsManager.isZoningEnabled()) { // [cite: 27]
            GLib.timeout_add(GLib.PRIORITY_DEFAULT_IDLE, 300, () => { // [cite: 27]
                if (this._settingsManager && this._settingsManager.isZoningEnabled() && this._windowManager) { // [cite: 27]
                    log('Performing initial snapAllWindowsToZones after delay...'); // [cite: 27]
                    this._performDelayedSnap("initial enable"); // [cite: 27]
                }
                return GLib.SOURCE_REMOVE; // [cite: 28]
            });
        }

        this._zoningChangedId = this._settingsManager.getGSettingObject().connect( // [cite: 29]
            `changed::${ENABLE_ZONING_KEY}`, // [cite: 29]
            () => {
                this._windowManager.connectSignals(); // [cite: 29]
                if (this._settingsManager.isZoningEnabled()) { // [cite: 29]
                    // Perform a full refresh including potential splits
                    if (this._windowManager) this._windowManager.refreshZonesAndLayout(); // [cite: 30]
                } else { // [cite: 30]
                    if (this._windowManager) this._windowManager.cleanupWindowProperties(); // Clean up if disabled
                }
                this._indicator.updateToggleState(); // [cite: 30]
            }
        );
        this._zoneGapChangedId = this._settingsManager.getGSettingObject().connect( // [cite: 31]
            `changed::${ZONE_GAP_SIZE_KEY}`, // [cite: 31]
            () => {
                log('Zone gap size setting changed; re-snapping windows...'); // [cite: 31]
                if (this._windowManager) this._windowManager._rebuildAndResnapAll(); // Full rebuild for gap changes // [cite: 31]
            }
        );
        this._tabBarHeightChangedId = this._settingsManager.getGSettingObject().connect( // [cite: 32]
            `changed::${TAB_BAR_HEIGHT_KEY}`, // [cite: 32]
            () => {
                log('Tab bar height setting changed; re-snapping windows and updating tabs...'); // [cite: 32]
                // Snapping also updates tab bar position/size, a full rebuild is safer
                if (this._windowManager) this._windowManager._rebuildAndResnapAll(); // [cite: 32]
                this._updateAllTabsAppearance("tab bar height change"); // [cite: 32]
            }
        );
        this._tabFontSizeChangedId = this._settingsManager.getGSettingObject().connect( // [cite: 34]
            `changed::${TAB_FONT_SIZE_KEY}`, // [cite: 34]
            () => {
                log('Tab font size setting changed; updating tabs...'); // [cite: 34]
                this._updateAllTabsAppearance("tab font size change"); // [cite: 34]
            }
        );
        // Connect signals for new tab settings // [cite: 35]
        this._tabIconSizeChangedId = this._settingsManager.getGSettingObject().connect( // [cite: 35]
            `changed::${TAB_ICON_SIZE_KEY}`, () => this._updateAllTabsAppearance("tab icon size change") // [cite: 35]
        );
        this._tabCornerRadiusChangedId = this._settingsManager.getGSettingObject().connect( // [cite: 36]
            `changed::${TAB_CORNER_RADIUS_KEY}`, () => this._updateAllTabsAppearance("tab corner radius change") // [cite: 36]
        );
        this._tabCloseButtonIconSizeChangedId = this._settingsManager.getGSettingObject().connect( // [cite: 37]
            `changed::${TAB_CLOSE_BUTTON_ICON_SIZE_KEY}`, () => this._updateAllTabsAppearance("tab close button icon size change") // [cite: 37]
        );
        this._tabSpacingChangedId = this._settingsManager.getGSettingObject().connect( // [cite: 38]
            `changed::${TAB_SPACING_KEY}`, () => this._updateAllTabsAppearance("tab spacing change") // [cite: 38]
        );
        this._tabMinWidthChangedId = this._settingsManager.getGSettingObject().connect( // [cite: 39]
            `changed::${TAB_MIN_WIDTH_KEY}`, () => this._updateAllTabsAppearance("tab min width change") // [cite: 39]
        );
        this._tabMaxWidthChangedId = this._settingsManager.getGSettingObject().connect( // [cite: 40]
            `changed::${TAB_MAX_WIDTH_KEY}`, () => this._updateAllTabsAppearance("tab max width change") // [cite: 40]
        );
        if (Main.layoutManager) { // [cite: 41]
            this._monitorsChangedId = Main.layoutManager.connect( // [cite: 41]
                'monitors-changed', // [cite: 41]
                () => {
                    log('Monitors changed event detected.'); // [cite: 41]
                    if (this._highlightManager) this._highlightManager.reinitHighlighters(); // [cite: 41]

                    if (this._snapOnMonitorsChangedTimeoutId > 0) { // [cite: 42]
                        GLib.Source.remove(this._snapOnMonitorsChangedTimeoutId); // [cite: 42]
                    }
                    this._snapOnMonitorsChangedTimeoutId = GLib.timeout_add(GLib.PRIORITY_DEFAULT_IDLE, 750, () => { // [cite: 42]
                        log('Processing monitors changed event (delayed).'); // [cite: 43]
                        if (this._windowManager) this._windowManager.refreshZonesAndLayout(); // Full refresh on monitor change // [cite: 43]
                        this._snapOnMonitorsChangedTimeoutId = 0; // [cite: 43]
                        return GLib.SOURCE_REMOVE; // [cite: 43]
                    });
                }
            );
        }

        try { // [cite: 45]
            this._sessionProxy = new SessionManagerProxy( // [cite: 45]
                Gio.DBus.session, // [cite: 45]
                'org.gnome.SessionManager', // [cite: 45]
                '/org/gnome/SessionManager', // [cite: 45]
                (proxy, error) => { // [cite: 45]
                    if (error) { // [cite: 46]
                        log(`Error creating SessionManager proxy: ${error.message}`); // [cite: 46]
                        this._sessionProxy = null; // [cite: 46]
                        return; // [cite: 46]
                    }
                    if (!this._sessionProxy) { // [cite: 47]
                        log('SessionManager proxy initialization failed silently.'); // [cite: 47]
                        return; // [cite: 47]
                    }
                    this._sessionResumedSignalId = this._sessionProxy.connectSignal('Resumed', () => { // [cite: 48]
                        log('System Resumed signal received.'); // [cite: 48]
                        if (this._snapOnResumeTimeoutId > 0) { // [cite: 48]
                            GLib.Source.remove(this._snapOnResumeTimeoutId); // [cite: 49]
                        }
                        this._snapOnResumeTimeoutId = GLib.timeout_add(GLib.PRIORITY_DEFAULT_IDLE, 1000, () => { // [cite: 49]
                            log('Processing Resumed signal (delayed snap).'); // [cite: 49]
                            if (this._windowManager) this._windowManager.refreshZonesAndLayout(); // Full refresh on resume // [cite: 50]
                            this._snapOnResumeTimeoutId = 0; // [cite: 50]
                            return GLib.SOURCE_REMOVE; // [cite: 50]
                        });
                    });
                    log('Connected to SessionManager Resumed signal.'); // [cite: 50]
                }
            );
        } catch (e) { // [cite: 52]
            log(`Failed to create SessionManager D-Bus proxy: ${e}`); // [cite: 52]
            this._sessionProxy = null; // [cite: 53]
        }

        this._addCycleKeybinding(); // [cite: 53]
        this._addCycleBackwardKeybinding(); // [cite: 53]
        this._cycleAccelChangedId = this._settingsManager.getGSettingObject().connect( // [cite: 54]
            `changed::${CYCLE_ACCELERATOR_KEY}`, // [cite: 54]
            () => {
                log('Cycle accelerator changed; rebinding…'); // [cite: 54]
                Main.wm.removeKeybinding(CYCLE_ACCELERATOR_KEY); // [cite: 54]
                this._addCycleKeybinding(); // [cite: 54]
            }
        );
        this._cycleBackwardAccelChangedId = this._settingsManager.getGSettingObject().connect( // [cite: 55]
            `changed::${CYCLE_BACKWARD_ACCELERATOR_KEY}`, // [cite: 55]
            () => {
                log('Backward cycle accelerator changed; rebinding…'); // [cite: 55]
                Main.wm.removeKeybinding(CYCLE_BACKWARD_ACCELERATOR_KEY); // [cite: 55]
                this._addCycleBackwardKeybinding(); // [cite: 55]
            }
        );

        log('Enabled.'); // [cite: 56]
    }

    disable() {
        log('Disabling…'); // [cite: 56]
        if (this._snapOnMonitorsChangedTimeoutId > 0) { // [cite: 57]
            GLib.Source.remove(this._snapOnMonitorsChangedTimeoutId); // [cite: 57]
            this._snapOnMonitorsChangedTimeoutId = 0; // [cite: 57]
        }
        if (this._snapOnResumeTimeoutId > 0) { // [cite: 58]
            GLib.Source.remove(this._snapOnResumeTimeoutId); // [cite: 58]
            this._snapOnResumeTimeoutId = 0; // [cite: 59]
        }

        if (this._sessionProxy && this._sessionResumedSignalId > 0) { // [cite: 59]
            try { // [cite: 59]
                this._sessionProxy.disconnectSignal(this._sessionResumedSignalId); // [cite: 59]
            } catch (e) { // [cite: 60]
                log(`Error disconnecting SessionManager Resumed signal: ${e}`); // [cite: 60]
            }
            this._sessionResumedSignalId = 0; // [cite: 61]
        }
        this._sessionProxy = null; // [cite: 62]
        if (this._monitorsChangedId > 0 && Main.layoutManager) { // [cite: 63]
            Main.layoutManager.disconnect(this._monitorsChangedId); // [cite: 63]
            this._monitorsChangedId = 0; // [cite: 64]
        }
        const gsettingsObj = this._settingsManager.getGSettingObject(); // [cite: 64]
        if (this._zoningChangedId > 0) { // [cite: 65]
            gsettingsObj.disconnect(this._zoningChangedId); // [cite: 65]
            this._zoningChangedId = 0; // [cite: 65]
        }
        if (this._cycleAccelChangedId > 0) { // [cite: 66]
            gsettingsObj.disconnect(this._cycleAccelChangedId); // [cite: 66]
            this._cycleAccelChangedId = 0; // [cite: 67]
        }
        if (this._cycleBackwardAccelChangedId > 0) { // [cite: 67]
            gsettingsObj.disconnect(this._cycleBackwardAccelChangedId); // [cite: 67]
            this._cycleBackwardAccelChangedId = 0; // [cite: 68]
        }
        if (this._zoneGapChangedId > 0) { // [cite: 68]
            gsettingsObj.disconnect(this._zoneGapChangedId); // [cite: 68]
            this._zoneGapChangedId = 0; // [cite: 69]
        }
        if (this._tabBarHeightChangedId > 0) { // [cite: 69]
            gsettingsObj.disconnect(this._tabBarHeightChangedId); // [cite: 69]
            this._tabBarHeightChangedId = 0; // [cite: 70]
        }
        if (this._tabFontSizeChangedId > 0) { // [cite: 70]
            gsettingsObj.disconnect(this._tabFontSizeChangedId); // [cite: 70]
            this._tabFontSizeChangedId = 0; // [cite: 71]
        }

        // Disconnect new tab settings signals
        if (this._tabIconSizeChangedId > 0) { // [cite: 71]
            gsettingsObj.disconnect(this._tabIconSizeChangedId); // [cite: 71]
            this._tabIconSizeChangedId = 0; // [cite: 72]
        }
        if (this._tabCornerRadiusChangedId > 0) { // [cite: 72]
            gsettingsObj.disconnect(this._tabCornerRadiusChangedId); // [cite: 72]
            this._tabCornerRadiusChangedId = 0; // [cite: 73]
        }
        if (this._tabCloseButtonIconSizeChangedId > 0) { // [cite: 73]
            gsettingsObj.disconnect(this._tabCloseButtonIconSizeChangedId); // [cite: 73]
            this._tabCloseButtonIconSizeChangedId = 0; // [cite: 74]
        }
        if (this._tabSpacingChangedId > 0) { // [cite: 74]
            gsettingsObj.disconnect(this._tabSpacingChangedId); // [cite: 74]
            this._tabSpacingChangedId = 0; // [cite: 75]
        }
        if (this._tabMinWidthChangedId > 0) { // [cite: 75]
            gsettingsObj.disconnect(this._tabMinWidthChangedId); // [cite: 75]
            this._tabMinWidthChangedId = 0; // [cite: 76]
        }
        if (this._tabMaxWidthChangedId > 0) { // [cite: 76]
            gsettingsObj.disconnect(this._tabMaxWidthChangedId); // [cite: 76]
            this._tabMaxWidthChangedId = 0; // [cite: 77]
        }

        Main.wm.removeKeybinding(CYCLE_ACCELERATOR_KEY); // [cite: 77]
        Main.wm.removeKeybinding(CYCLE_BACKWARD_ACCELERATOR_KEY); // [cite: 77]
        if (this._windowManager) { // [cite: 78]
            this._windowManager.cleanupWindowProperties(); // [cite: 78]
            this._windowManager.destroy(); // [cite: 78]
            this._windowManager = null; // [cite: 78]
        }
        if (this._highlightManager) { // [cite: 79]
            this._highlightManager.destroy(); // [cite: 79]
            this._highlightManager = null; // [cite: 80]
        }
        if (this._indicator) { // [cite: 80]
            this._indicator.destroy(); // [cite: 80]
            this._indicator = null; // [cite: 81]
        }
        if (this._settingsManager) { // [cite: 81]
            this._settingsManager.destroy(); // [cite: 81]
            this._settingsManager = null; // [cite: 82]
        }

        log('Disabled.'); // [cite: 82]
    }

    _addCycleKeybinding() {
        const accel = this._settingsManager.getGSettingObject().get_strv(CYCLE_ACCELERATOR_KEY)[0]; // [cite: 83]
        log(`Binding cycle shortcut: ${accel}`); // [cite: 84]

        Main.wm.addKeybinding( // [cite: 84]
            CYCLE_ACCELERATOR_KEY, // [cite: 84]
            this._settingsManager.getGSettingObject(), // [cite: 84]
            Meta.KeyBindingFlags.NONE, // [cite: 84]
            Shell.ActionMode.ALL, // [cite: 84]
            () => {
                log('🏷️ Cycle shortcut pressed!'); // [cite: 84]
                if (this._windowManager) this._windowManager.cycleWindowsInCurrentZone(); // [cite: 85]
            }
        );
    }

    _addCycleBackwardKeybinding() {
        const accel = this._settingsManager.getGSettingObject().get_strv(CYCLE_BACKWARD_ACCELERATOR_KEY)[0]; // [cite: 86]
        log(`Binding backward cycle shortcut: ${accel}`); // [cite: 87]

        Main.wm.addKeybinding( // [cite: 87]
            CYCLE_BACKWARD_ACCELERATOR_KEY, // [cite: 87]
            this._settingsManager.getGSettingObject(), // [cite: 87]
            Meta.KeyBindingFlags.NONE, // [cite: 87]
            Shell.ActionMode.ALL, // [cite: 87]
            () => {
                log('🏷️ Backward cycle shortcut pressed!'); // [cite: 87]
                if (this._windowManager) this._windowManager.cycleWindowsInCurrentZoneBackward(); // [cite: 88]
            }
        );
    }
}



===== FILE: ./preferences/ZoneEditorGrid.js =====
// ./preferences/ZoneEditorGrid.js
import Gtk from 'gi://Gtk'; // [cite: 512]
import GObject from 'gi://GObject'; // [cite: 512]
import { gettext as _ } from 'resource:///org/gnome/Shell/Extensions/js/extensions/prefs.js'; // [cite: 513]

export class ZoneEditorGrid extends Gtk.Grid {
    static {
        GObject.registerClass({ Signals: { 'changed': {} } }, this); // [cite: 531]
    }

    constructor(zoneData, monitorCount) {
        super({ // [cite: 532]
            column_spacing: 12, // [cite: 532]
            row_spacing: 6, // [cite: 532]
            margin_top: 10, // [cite: 532]
            margin_bottom: 10, // [cite: 532]
            margin_start: 10, // [cite: 532]
            margin_end: 10, // [cite: 532]
            hexpand: true, // [cite: 533]
        });
        this._zone = { ...zoneData }; // [cite: 533]
        this.attach(new Gtk.Label({ label: _('Name:'), halign: Gtk.Align.END }), 0, 0, 1, 1); // [cite: 534]
        this._nameEntry = new Gtk.Entry({ text: this._zone.name || '', hexpand: true }); // [cite: 535]
        this._nameEntry.connect('changed', () => { // [cite: 535]
            this._zone.name = this._nameEntry.get_text(); // [cite: 536]
            this.emit('changed'); // [cite: 536]
        });
        this.attach(this._nameEntry, 1, 0, 3, 1); // [cite: 537]

        this.attach(new Gtk.Label({ label: _('Monitor Index:'), halign: Gtk.Align.END }), 0, 1, 1, 1); // [cite: 537]
        this._monitorSpin = Gtk.SpinButton.new_with_range(0, Math.max(0, monitorCount - 1), 1); // [cite: 538]
        this._monitorSpin.set_value(this._zone.monitorIndex || 0); // [cite: 538]
        this._monitorSpin.connect('value-changed', () => { // [cite: 539]
            this._zone.monitorIndex = this._monitorSpin.get_value_as_int(); // [cite: 539]
            this.emit('changed'); // [cite: 539]
        });
        this.attach(this._monitorSpin, 1, 1, 1, 1); // [cite: 540]

        const fields = [ // [cite: 540]
            { label: _('X:'), key: 'x' }, { label: _('Y:'), key: 'y' }, // [cite: 540]
            { label: _('Width:'), key: 'width' }, { label: _('Height:'), key: 'height' } // [cite: 540]
        ];
        fields.forEach((f, i) => { // [cite: 541]
            const row = Math.floor(i / 2) + 2; // [cite: 541]
            const col = (i % 2) * 2; // [cite: 541]
            this.attach(new Gtk.Label({ label: f.label, halign: Gtk.Align.END }), col, row, 1, 1); // [cite: 541]
            const spin = Gtk.SpinButton.new_with_range(0, 10000, 10); // [cite: 541]
            spin.set_value(this._zone[f.key] || 0); // [cite: 541]
            spin.set_hexpand(true); // [cite: 542]
            spin.connect('value-changed', () => { // [cite: 542]
                this._zone[f.key] = spin.get_value_as_int(); // [cite: 542]
                this.emit('changed'); // [cite: 542]
            });
            this.attach(spin, col + 1, row, 1, 1); // [cite: 542]
        });
    }

    get_zone_data() {
        return { ...this._zone }; // [cite: 543]
    }
}



===== FILE: ./preferences/GeneralSettingsGroup.js =====
// ./preferences/GeneralSettingsGroup.js
import Adw from 'gi://Adw'; // [cite: 511]
import Gtk from 'gi://Gtk'; // [cite: 512]
import Gio from 'gi://Gio'; // [cite: 512]
import { gettext as _ } from 'resource:///org/gnome/Shell/Extensions/js/extensions/prefs.js'; // [cite: 513]

const ENABLE_ZONING_KEY                     = 'enable-auto-zoning'; // [cite: 515]
const RESTORE_ON_UNTILE_KEY                 = 'restore-original-size-on-untile'; // [cite: 516]
const TILE_NEW_WINDOWS_KEY                  = 'tile-new-windows'; // [cite: 517]
const HIGHLIGHT_ON_HOVER_KEY                = 'highlight-on-hover'; // [cite: 518]
const CYCLE_ACCELERATOR_KEY                 = 'cycle-zone-windows-accelerator'; // [cite: 519]
const CYCLE_BACKWARD_ACCELERATOR_KEY        = 'cycle-zone-windows-backward-accelerator'; // [cite: 520]
const ZONE_GAP_SIZE_KEY                     = 'zone-gap-size'; // [cite: 523]
const SNAP_EVASION_KEY                      = 'snap-evasion-key'; // [cite: 530]
const log = msg => console.log(`[AutoZonerPrefs.GeneralSettings] ${msg}`); // [cite: 531]

export function createGeneralSettingsGroup(settings) {
    const group = new Adw.PreferencesGroup({ title: _('General Settings') }); // [cite: 547]

    // Enable Auto Zoning
    const enableSwitch = new Gtk.Switch({ valign: Gtk.Align.CENTER }); // [cite: 548]
    settings.bind(ENABLE_ZONING_KEY, enableSwitch, 'active', Gio.SettingsBindFlags.DEFAULT); // [cite: 549]
    const enableRow = new Adw.ActionRow({ // [cite: 549]
        title: _('Enable Auto Zoning'), // [cite: 549]
        subtitle: _('Globally enable or disable the extension'), // [cite: 549]
        activatable_widget: enableSwitch // [cite: 549]
    });
    enableRow.add_suffix(enableSwitch); // [cite: 550]
    group.add(enableRow); // [cite: 550]

    // Snap Evasion Key
    const evasionKeyChoices = [ // [cite: 550]
        { value: 'disabled', label: _('Disabled') }, // [cite: 550]
        { value: 'control',  label: _('Control') }, // [cite: 550]
        { value: 'alt',      label: _('Alt') }, // [cite: 550]
        { value: 'shift',    label: _('Shift') }, // [cite: 550]
        { value: 'super',    label: _('Super (Windows/Cmd)') } // [cite: 551]
    ];
    const evasionKeyModel = new Gtk.StringList(); // [cite: 552]
    evasionKeyChoices.forEach(choice => evasionKeyModel.append(choice.label)); // [cite: 552]

    const evasionKeyRow = new Adw.ComboRow({ // [cite: 552]
        title: _('Snap Evasion Key'), // [cite: 552]
        subtitle: _('Hold this key while dragging to prevent snapping'), // [cite: 552]
        model: evasionKeyModel, // [cite: 552]
    });
    const currentEvasionKey = settings.get_string(SNAP_EVASION_KEY); // [cite: 553]
    let currentEvasionKeyIndex = evasionKeyChoices.findIndex(c => c.value === currentEvasionKey); // [cite: 554]
    if (currentEvasionKeyIndex === -1) currentEvasionKeyIndex = 0; // [cite: 554]
    evasionKeyRow.selected = currentEvasionKeyIndex; // [cite: 555]
    evasionKeyRow.connect('notify::selected', () => { // [cite: 556]
        const selectedIndex = evasionKeyRow.selected; // [cite: 556]
        if (selectedIndex >= 0 && selectedIndex < evasionKeyChoices.length) { // [cite: 556]
            settings.set_string(SNAP_EVASION_KEY, evasionKeyChoices[selectedIndex].value); // [cite: 556]
        }
    });
    const evasionKeySettingChangedId = settings.connect(`changed::${SNAP_EVASION_KEY}`, () => { // [cite: 565]
        const updatedKey = settings.get_string(SNAP_EVASION_KEY); // [cite: 565]
        let updatedIndex = evasionKeyChoices.findIndex(c => c.value === updatedKey); // [cite: 565]
        if (updatedIndex === -1) updatedIndex = 0; // [cite: 565]
        if (evasionKeyRow.selected !== updatedIndex) { // [cite: 565]
            evasionKeyRow.selected = updatedIndex; // [cite: 566]
        }
    });
    // Disconnect signal handled by parent AutoZonerPrefs window closure [cite: 567, 568, 610]
    group.add(evasionKeyRow); // [cite: 569]

    // Highlight on Hover
    const hoverSwitch = new Gtk.Switch({ valign: Gtk.Align.CENTER }); // [cite: 570]
    settings.bind(HIGHLIGHT_ON_HOVER_KEY, hoverSwitch, 'active', Gio.SettingsBindFlags.DEFAULT); // [cite: 571]
    const hoverRow = new Adw.ActionRow({ // [cite: 571]
        title: _('Highlight Zone on Hover'), // [cite: 571]
        subtitle: _('Visually highlight a zone when dragging a window over it'), // [cite: 571]
        activatable_widget: hoverSwitch // [cite: 571]
    });
    hoverRow.add_suffix(hoverSwitch); // [cite: 572]
    group.add(hoverRow); // [cite: 572]

    // Restore Original Size on Untile
    const restoreSwitch = new Gtk.Switch({ valign: Gtk.Align.CENTER }); // [cite: 572]
    settings.bind(RESTORE_ON_UNTILE_KEY, restoreSwitch, 'active', Gio.SettingsBindFlags.DEFAULT); // [cite: 573]
    const restoreRow = new Adw.ActionRow({ // [cite: 573]
        title: _('Restore Original Size on Untile'), // [cite: 573]
        subtitle: _('When a window leaves all zones, restore its original size/position'), // [cite: 573]
        activatable_widget: restoreSwitch // [cite: 573]
    });
    restoreRow.add_suffix(restoreSwitch); // [cite: 574]
    group.add(restoreRow); // [cite: 574]

    // Tile New Windows
    const tileSwitch = new Gtk.Switch({ valign: Gtk.Align.CENTER }); // [cite: 574]
    settings.bind(TILE_NEW_WINDOWS_KEY, tileSwitch, 'active', Gio.SettingsBindFlags.DEFAULT); // [cite: 575]
    const tileRow = new Adw.ActionRow({ // [cite: 575]
        title: _('Tile New Windows'), // [cite: 575]
        subtitle: _('Automatically tile newly opened windows if they fall into a zone'), // [cite: 575]
        activatable_widget: tileSwitch // [cite: 575]
    });
    tileRow.add_suffix(tileSwitch); // [cite: 576]
    group.add(tileRow); // [cite: 576]

    // Cycle Zone Windows Shortcut (forward)
    const accelEntry = new Gtk.Entry({ // [cite: 576]
        hexpand: true, // [cite: 576]
        placeholder_text: '<Control><Alt>8' // [cite: 576]
    });
    const existing = settings.get_strv(CYCLE_ACCELERATOR_KEY); // [cite: 577]
    accelEntry.set_text(existing[0] || ''); // [cite: 577]
    accelEntry.connect('changed', () => { // [cite: 577]
        const text = accelEntry.get_text().trim(); // [cite: 577]
        if (text) { // [cite: 577]
            settings.set_strv(CYCLE_ACCELERATOR_KEY, [ text ]); // [cite: 577]
            log(`Set cycle shortcut: ${text}`); // [cite: 578]
        } else {
            settings.set_strv(CYCLE_ACCELERATOR_KEY, []); // [cite: 578]
        }
    });
    const accelRow = new Adw.ActionRow({ // [cite: 579]
        title: _('Cycle Zone Windows Shortcut'), // [cite: 579]
        subtitle: _('E.g. <Control><Alt>8 or <Super>grave'), // [cite: 579]
    });
    accelRow.add_suffix(accelEntry); // [cite: 580]
    accelRow.activatable_widget = accelEntry; // [cite: 580]
    group.add(accelRow); // [cite: 580]

    // Cycle Zone Windows Backward Shortcut
    const backwardAccelEntry = new Gtk.Entry({ // [cite: 580]
        hexpand: true, // [cite: 580]
        placeholder_text: '<Control><Alt>9' // [cite: 580]
    });
    const existingBackward = settings.get_strv(CYCLE_BACKWARD_ACCELERATOR_KEY); // [cite: 581]
    backwardAccelEntry.set_text(existingBackward[0] || ''); // [cite: 581]
    backwardAccelEntry.connect('changed', () => { // [cite: 581]
        const text = backwardAccelEntry.get_text().trim(); // [cite: 581]
        if (text) { // [cite: 581]
            settings.set_strv(CYCLE_BACKWARD_ACCELERATOR_KEY, [ text ]); // [cite: 581]
            log(`Set backward cycle shortcut: ${text}`); // [cite: 581]
        } else {
            settings.set_strv(CYCLE_BACKWARD_ACCELERATOR_KEY, []); // [cite: 582]
        }
    });
    const backwardAccelRow = new Adw.ActionRow({ // [cite: 583]
        title: _('Cycle Zone Windows Backward Shortcut'), // [cite: 583]
        subtitle: _('E.g. <Control><Shift><Alt>9 or <Super><Shift>grave'), // [cite: 583]
    });
    backwardAccelRow.add_suffix(backwardAccelEntry); // [cite: 584]
    backwardAccelRow.activatable_widget = backwardAccelEntry; // [cite: 584]
    group.add(backwardAccelRow); // [cite: 584]
    
    // Zone Gap Size
    const gapSpin = Gtk.SpinButton.new_with_range(0, 50, 1); // [cite: 589]
    settings.bind(ZONE_GAP_SIZE_KEY, gapSpin, 'value', Gio.SettingsBindFlags.DEFAULT); // [cite: 590]
    const gapRow = new Adw.ActionRow({ // [cite: 590]
        title: _('Zone Gap Size (px)'), // [cite: 590]
        subtitle: _('Gap around zones. 0 for no gaps. Re-snap windows to apply.'), // [cite: 590]
        activatable_widget: gapSpin // [cite: 590]
    });
    gapRow.add_suffix(gapSpin); // [cite: 591]
    group.add(gapRow); // [cite: 595]

    return { group, evasionKeySettingChangedId };
}



===== FILE: ./preferences/ZoneDefinitionsGroup.js =====
// ./preferences/ZoneDefinitionsGroup.js
import Adw from 'gi://Adw'; // [cite: 511]
import Gtk from 'gi://Gtk'; // [cite: 512]
import { gettext as _ } from 'resource:///org/gnome/Shell/Extensions/js/extensions/prefs.js'; // [cite: 513]
import { ZoneEditorGrid } from './ZoneEditorGrid.js'; // Assuming ZoneEditorGrid.js is in the same directory

const ZONE_SETTINGS_KEY = 'zones'; // [cite: 514]
const log = msg => console.log(`[AutoZonerPrefs.ZoneDefs] ${msg}`); // [cite: 531]

export class ZoneDefinitionsGroup {
    constructor(settings, monitorCount, window) {
        this._settings = settings;
        this._monitorCount = monitorCount;
        this._window = window; // Reference to the main preferences window for dialogs

        this.group = new Adw.PreferencesGroup({ // [cite: 608]
            title: _('Zone Definitions'), // [cite: 608]
            description: _('Define screen areas where windows will tile automatically.') // [cite: 608]
        });

        this._addButtonRow = new Adw.ActionRow(); // [cite: 609]
        const addButton = new Gtk.Button({ // [cite: 609]
            label: _('Add New Zone'), // [cite: 609]
            halign: Gtk.Align.CENTER, // [cite: 609]
            css_classes: ['suggested-action'] // [cite: 609]
        });
        addButton.connect('clicked', () => this._addZone()); // [cite: 610]
        this._addButtonRow.set_child(addButton); // [cite: 610]

        this._loadZonesToUI();
    }

    getWidget() {
        return this.group;
    }

    _loadZonesToUI() {
        // Clear previous expanders except the add button row
        let child = this.group.get_first_child(); // [cite: 615]
        while (child) { // [cite: 616]
            const next = child.get_next_sibling(); // [cite: 616]
            if (child !== this._addButtonRow && child instanceof Adw.ExpanderRow) { // [cite: 616, 617]
                 this.group.remove(child); // [cite: 617]
            }
            child = next; // [cite: 618]
        }
        // Ensure add button row is removed if it exists, to re-add it at the end
        if (this._addButtonRow.get_parent() === this.group) { // [cite: 619]
            this.group.remove(this._addButtonRow); // [cite: 619]
        }


        let zones = []; // [cite: 620]
        try {
            zones = JSON.parse(this._settings.get_string(ZONE_SETTINGS_KEY)); // [cite: 621]
            if (!Array.isArray(zones)) zones = []; // [cite: 622]
        } catch (e) {
            log(`Error parsing zones JSON: ${e}`); // [cite: 622]
            zones = []; // [cite: 623]
        }

        zones.forEach(zoneData => this._createAndAddZoneExpander(zoneData)); // [cite: 623]
        
        this.group.add(this._addButtonRow); // Re-add the add button row [cite: 624]
    }

    _createAndAddZoneExpander(zoneData) {
        const editorGrid = new ZoneEditorGrid(zoneData, this._monitorCount);
        const expanderRow = new Adw.ExpanderRow({
            title: zoneData.name || _('Unnamed Zone'),
            subtitle: `X:${zoneData.x}, Y:${zoneData.y}, W:${zoneData.width}, H:${zoneData.height}, M:${zoneData.monitorIndex + 1}`
        });
        expanderRow.add_row(editorGrid);

        const removeButton = new Gtk.Button({
            icon_name: 'edit-delete-symbolic',
            valign: Gtk.Align.CENTER,
            tooltip_text: _("Remove this zone"),
            css_classes: ['flat', 'circular']
        });
        expanderRow.add_suffix(removeButton);
        expanderRow.set_enable_expansion(true);

        editorGrid.connect('changed', () => {
            const cd = editorGrid.get_zone_data();
            expanderRow.title    = cd.name || _('Unnamed Zone');
            expanderRow.subtitle = `X:${cd.x}, Y:${cd.y}, W:${cd.width}, H:${cd.height}, M:${cd.monitorIndex + 1}`;
            this._saveZones();
        });
        removeButton.connect('clicked', () => {
            const dialog = new Adw.MessageDialog({
                heading: _("Remove Zone?"),
                body:    _("Are you sure you want to remove “%s”?").format(expanderRow.title),
                transient_for: this._window.get_root(),
                modal: true
            });
            dialog.add_response("cancel", _("Cancel"));
            dialog.add_response("remove", _("Remove"));
            dialog.set_response_appearance("remove", Adw.ResponseAppearance.DESTRUCTIVE);
            dialog.connect("response", (d, resp) => {
                if (resp === "remove") {
                    this.group.remove(expanderRow);
                    this._saveZones();
                }
                d.destroy(); // Make sure to destroy the dialog
            });
            dialog.present();
        });
        
        // CORRECTED LINE:
        // Add the new expander row. Ordering is handled by _loadZonesToUI
        // (which removes _addButtonRow and adds it back after all zones).
        this.group.add(expanderRow);
    }

    _addZone() {
        let current = []; // [cite: 634]
        try {
            current = JSON.parse(this._settings.get_string(ZONE_SETTINGS_KEY)) || []; // [cite: 635]
        } catch {} // [cite: 636]
        const idx = current.length + 1; // [cite: 636]
        const newZone = { // [cite: 637]
            monitorIndex: 0, // Default to first monitor [cite: 637]
            name:         _('New Zone %d').format(idx), // [cite: 637]
            x: 0, y: 0, width: 600, height: 400 // Some default size [cite: 637]
        };
        this._createAndAddZoneExpander(newZone); // [cite: 638]
        this._saveZones(); // [cite: 638]
    }

    _saveZones() {
        const zones = []; // [cite: 638]
        let child = this.group.get_first_child(); // [cite: 639]
        while (child) { // [cite: 639]
            if (child instanceof Adw.ExpanderRow && child.get_n_rows() > 0) { // [cite: 639]
                const firstRowContent = child.get_row_at_index(0); // [cite: 639]
                if (firstRowContent instanceof ZoneEditorGrid) { // [cite: 640]
                    zones.push(firstRowContent.get_zone_data()); // [cite: 640]
                } else {
                    log('Warning: Could not find ZoneEditorGrid in ExpanderRow to save zone data.'); // [cite: 643]
                }
            }
            child = child.get_next_sibling(); // [cite: 644]
        }
        this._settings.set_string(ZONE_SETTINGS_KEY, JSON.stringify(zones)); // [cite: 645]
        log(`Saved ${zones.length} zones.`); // [cite: 645]
    }
}



===== FILE: ./preferences/TabBarSettingsGroup.js =====
// ./preferences/TabBarSettingsGroup.js
import Adw from 'gi://Adw'; // [cite: 511]
import Gtk from 'gi://Gtk'; // [cite: 512]
import Gio from 'gi://Gio'; // [cite: 512]
import { gettext as _ } from 'resource:///org/gnome/Shell/Extensions/js/extensions/prefs.js'; // [cite: 513]

const TAB_BAR_HEIGHT_KEY                    = 'tab-bar-height'; // [cite: 521]
const TAB_FONT_SIZE_KEY                     = 'tab-font-size'; // [cite: 522]
const TAB_ICON_SIZE_KEY                     = 'tab-icon-size'; // [cite: 524]
const TAB_CORNER_RADIUS_KEY                 = 'tab-corner-radius'; // [cite: 525]
const TAB_CLOSE_BUTTON_ICON_SIZE_KEY        = 'tab-close-button-icon-size'; // [cite: 526]
const TAB_SPACING_KEY                       = 'tab-spacing'; // [cite: 527]
const TAB_MIN_WIDTH_KEY                     = 'tab-min-width'; // [cite: 528]
const TAB_MAX_WIDTH_KEY                     = 'tab-max-width'; // [cite: 529]

export function createTabBarSettingsGroup(settings) {
    const group = new Adw.PreferencesGroup({ title: _('Tab Bar Adjustments') }); // [cite: 584]

    // Tab Bar Height
    const heightSpin = Gtk.SpinButton.new_with_range(16, 200, 1); // [cite: 585]
    settings.bind(TAB_BAR_HEIGHT_KEY, heightSpin, 'value', Gio.SettingsBindFlags.DEFAULT); // [cite: 586]
    const heightRow = new Adw.ActionRow({ // [cite: 586]
        title: _('Tab Bar Height (px)'), // [cite: 586]
        subtitle: _('Height in pixels for the tab bar'), // [cite: 586]
        activatable_widget: heightSpin // [cite: 586]
    });
    heightRow.add_suffix(heightSpin); // [cite: 587]
    group.add(heightRow); // [cite: 587]

    // Tab Font Size
    const fontSpin = Gtk.SpinButton.new_with_range(6, 72, 1); // [cite: 587]
    settings.bind(TAB_FONT_SIZE_KEY, fontSpin, 'value', Gio.SettingsBindFlags.DEFAULT); // [cite: 588]
    const fontRow = new Adw.ActionRow({ // [cite: 588]
        title: _('Tab Font Size (px)'), // [cite: 588]
        subtitle: _('Font size in pixels for the tab labels'), // [cite: 588]
        activatable_widget: fontSpin // [cite: 588]
    });
    fontRow.add_suffix(fontSpin); // [cite: 589]
    group.add(fontRow); // [cite: 589]

    // Tab Icon Size
    const tabIconSizeSpin = Gtk.SpinButton.new_with_range(8, 64, 1); // [cite: 596]
    settings.bind(TAB_ICON_SIZE_KEY, tabIconSizeSpin, 'value', Gio.SettingsBindFlags.DEFAULT); // [cite: 597]
    const tabIconSizeRow = new Adw.ActionRow({ // [cite: 597]
        title: _('Tab Icon Size (px)'), // [cite: 597]
        subtitle: _('Size for application icons in tabs'), // [cite: 597]
        activatable_widget: tabIconSizeSpin // [cite: 597]
    });
    tabIconSizeRow.add_suffix(tabIconSizeSpin); // [cite: 598]
    group.add(tabIconSizeRow); // [cite: 598]

    // Tab Corner Radius
    const tabCornerRadiusSpin = Gtk.SpinButton.new_with_range(0, 20, 1); // [cite: 598]
    settings.bind(TAB_CORNER_RADIUS_KEY, tabCornerRadiusSpin, 'value', Gio.SettingsBindFlags.DEFAULT); // [cite: 599]
    const tabCornerRadiusRow = new Adw.ActionRow({ // [cite: 599]
        title: _('Tab Corner Radius (px)'), // [cite: 599]
        subtitle: _('Radius for the top corners of tabs'), // [cite: 599]
        activatable_widget: tabCornerRadiusSpin // [cite: 599]
    });
    tabCornerRadiusRow.add_suffix(tabCornerRadiusSpin); // [cite: 600]
    group.add(tabCornerRadiusRow); // [cite: 600]

    // Tab Close Button Icon Size
    const tabCloseButtonIconSizeSpin = Gtk.SpinButton.new_with_range(8, 32, 1); // [cite: 600]
    settings.bind(TAB_CLOSE_BUTTON_ICON_SIZE_KEY, tabCloseButtonIconSizeSpin, 'value', Gio.SettingsBindFlags.DEFAULT); // [cite: 601]
    const tabCloseButtonIconSizeRow = new Adw.ActionRow({ // [cite: 601]
        title: _('Tab Close Button Icon Size (px)'), // [cite: 601]
        subtitle: _('Size for the close icon in tabs'), // [cite: 601]
        activatable_widget: tabCloseButtonIconSizeSpin // [cite: 601]
    });
    tabCloseButtonIconSizeRow.add_suffix(tabCloseButtonIconSizeSpin); // [cite: 602]
    group.add(tabCloseButtonIconSizeRow); // [cite: 602]

    // Tab Spacing
    const tabSpacingSpin = Gtk.SpinButton.new_with_range(0, 50, 1); // [cite: 602]
    settings.bind(TAB_SPACING_KEY, tabSpacingSpin, 'value', Gio.SettingsBindFlags.DEFAULT); // [cite: 603]
    const tabSpacingRow = new Adw.ActionRow({ // [cite: 603]
        title: _('Tab Spacing (px)'), // [cite: 603]
        subtitle: _('Gap between individual tabs'), // [cite: 603]
        activatable_widget: tabSpacingSpin // [cite: 603]
    });
    tabSpacingRow.add_suffix(tabSpacingSpin); // [cite: 604]
    group.add(tabSpacingRow); // [cite: 604]

    // Tab Min Width
    const tabMinWidthSpin = Gtk.SpinButton.new_with_range(30, 300, 5); // [cite: 604]
    settings.bind(TAB_MIN_WIDTH_KEY, tabMinWidthSpin, 'value', Gio.SettingsBindFlags.DEFAULT); // [cite: 605]
    const tabMinWidthRow = new Adw.ActionRow({ // [cite: 605]
        title: _('Tab Minimum Width (px)'), // [cite: 605]
        subtitle: _('Smallest width a tab can shrink to'), // [cite: 605]
        activatable_widget: tabMinWidthSpin // [cite: 605]
    });
    tabMinWidthRow.add_suffix(tabMinWidthSpin); // [cite: 606]
    group.add(tabMinWidthRow); // [cite: 606]

    // Tab Max Width
    const tabMaxWidthSpin = Gtk.SpinButton.new_with_range(50, 500, 5); // [cite: 606]
    settings.bind(TAB_MAX_WIDTH_KEY, tabMaxWidthSpin, 'value', Gio.SettingsBindFlags.DEFAULT); // [cite: 607]
    const tabMaxWidthRow = new Adw.ActionRow({ // [cite: 607]
        title: _('Tab Maximum Width (px)'), // [cite: 607]
        subtitle: _('Largest width a tab can expand to'), // [cite: 607]
        activatable_widget: tabMaxWidthSpin // [cite: 607]
    });
    tabMaxWidthRow.add_suffix(tabMaxWidthSpin); // [cite: 608]
    group.add(tabMaxWidthRow); // [cite: 608]

    return group;
}



===== FILE: ./modules/WindowManager.js =====
// modules/WindowManager.js

import Meta from 'gi://Meta';
import GLib from 'gi://GLib';
import Clutter from 'gi://Clutter';
import Mtk from 'gi://Mtk'; //
import * as Main from 'resource:///org/gnome/shell/ui/main.js';
import Shell from 'gi://Shell'; // Added for WindowTracker

import { ZoneDetector } from './ZoneDetector.js'; //
import { TabBar } from './TabBar.js'; //
const log = (context, msg) => console.log(`[AutoZoner.WindowManager.${context}] ${msg}`); //
const ALL_RESIZING_OPS = Meta.GrabOp.RESIZING_N | Meta.GrabOp.RESIZING_S |
    Meta.GrabOp.RESIZING_E | Meta.GrabOp.RESIZING_W |
    Meta.GrabOp.RESIZING_NW | Meta.GrabOp.RESIZING_NE | //
    Meta.GrabOp.RESIZING_SW | Meta.GrabOp.RESIZING_SE |
    Meta.GrabOp.KEYBOARD_RESIZING_N | Meta.GrabOp.KEYBOARD_RESIZING_S | //
    Meta.GrabOp.KEYBOARD_RESIZING_E | Meta.GrabOp.KEYBOARD_RESIZING_W |
    Meta.GrabOp.KEYBOARD_RESIZING_NW | Meta.GrabOp.KEYBOARD_RESIZING_NE | //
    Meta.GrabOp.KEYBOARD_RESIZING_SW | Meta.GrabOp.KEYBOARD_RESIZING_SE; //

export class WindowManager {
    constructor(settingsManager, highlightManager) {
        this._settingsManager = settingsManager; //
        this._highlightManager = highlightManager; //
        this._zoneDetector = new ZoneDetector(); //
        this._signalConnections = []; //
        this._windowTracker = Shell.WindowTracker.get_default(); // Added for app info

        this._snappedWindows = {}; //
        this._cycleIndexByZone = {}; //
        this._tabBars = {}; //

        this._splitStates = new Map(); // Tracks { originalHeight, childZoneId, isActive }
        this._activeDisplayZones = []; // Zones actually used for snapping/display
    }

    _getEvasionKeyMask() {
        const keyName = this._settingsManager.getSnapEvasionKeyName(); //
        switch (keyName?.toLowerCase()) { //
            case 'control': //
                return Clutter.ModifierType.CONTROL_MASK; //
            case 'alt': //
                return Clutter.ModifierType.MOD1_MASK; //
            case 'shift': //
                return Clutter.ModifierType.SHIFT_MASK; //
            case 'super': //
                return Clutter.ModifierType.MOD4_MASK; //
            case 'disabled': //
            default: //
                return 0; //
        }
    }

    _rebuildActiveDisplayZones() {
        log('_rebuildActiveDisplayZones', 'Rebuilding active display zones...');
        const effectiveZones = [];
        const baseZones = this._settingsManager.getZones();

        for (const bz of baseZones) {
            // Ensure each base zone has a stable ID. Using name as fallback if no explicit ID.
            // It's better if zones from settings have a truly unique 'id' field.
            // For this patch, we'll assume `bz.name` is unique or use stringify as a last resort for ID.
            const bzId = bz.id || bz.name || JSON.stringify(bz);
            // Defensive copy:
            const baseZoneCopy = { ...bz, id: bzId };

            const splitState = this._splitStates.get(bzId);

            if (splitState && splitState.isActive) {
                // Upper half of the split zone
                effectiveZones.push({
                    ...baseZoneCopy,
                    height: splitState.originalHeight / 2,
                    originalHeight: splitState.originalHeight, // Keep track for potential nested splits if ever needed
                    isSplitParent: true, // Mark as parent of a split
                    childZoneId: splitState.childZoneId
                });
                // Lower half of the split zone
                effectiveZones.push({
                    id: splitState.childZoneId,
                    monitorIndex: baseZoneCopy.monitorIndex,
                    name: `${baseZoneCopy.name || 'Zone'} (Lower)`, // TODO: i18n if needed
                    x: baseZoneCopy.x,
                    y: baseZoneCopy.y + (splitState.originalHeight / 2),
                    width: baseZoneCopy.width,
                    height: splitState.originalHeight / 2,
                    isSplitChild: true, // Mark as child of a split
                    parentZoneId: bzId
                });
            } else {
                effectiveZones.push(baseZoneCopy);
            }
        }
        this._activeDisplayZones = effectiveZones;
        log('_rebuildActiveDisplayZones', `Rebuilt with ${this._activeDisplayZones.length} active zones.`);
    }

    _rebuildAndResnapAll() {
        log('_rebuildAndResnapAll', 'Starting full rebuild and resnap...');
        // Destroy all existing tab bars
        Object.values(this._tabBars).forEach(bar => bar.destroy());
        this._tabBars = {};

        // Preserve windows that were snapped to specific zones before clearing
        const previouslySnappedWindowsByZone = { ...this._snappedWindows };
        this._snappedWindows = {};
        this._cycleIndexByZone = {};

        this._rebuildActiveDisplayZones();
        this.snapAllWindowsToZones(previouslySnappedWindowsByZone); // Pass previous state for smarter resnapping
        this.updateAllTabAppearances();
        log('_rebuildAndResnapAll', 'Full rebuild and resnap completed.');
    }

    connectSignals() {
        this._disconnectSignals(); //
        if (!this._settingsManager.isZoningEnabled()) { //
            log('connectSignals', 'Zoning disabled.'); //
            return; //
        }
        this._rebuildActiveDisplayZones(); // Initial build of active zones
        this._connect(global.display, 'grab-op-begin', (d, w, o) => this._onGrabOpBegin(d, w, o)); //
        this._connect(global.display, 'grab-op-end', (d, w, o) => this._onGrabOpEnd(d, w, o)); //
        this._connect(global.display, 'window-created', (d, w) => this._onWindowCreated(d, w)); //
        log('connectSignals', 'Signals connected.'); //
    }

    _connect(gobj, name, cb) {
        const id = gobj.connect(name, cb); //
        this._signalConnections.push({ gobj, id }); //
    }

    _disconnectSignals() {
        this._signalConnections.forEach(({ gobj, id }) => { //
            try { gobj.disconnect(id); } catch { } //
        });
        this._signalConnections = []; //
    }

    _onWindowCreated(display, window) {
        if (!this._settingsManager.isZoningEnabled() || //
            !this._settingsManager.isTileNewWindowsEnabled()) //
            return; //
        if (window.is_fullscreen() || window.get_window_type() !== Meta.WindowType.NORMAL) //
            return; //
        GLib.timeout_add(GLib.PRIORITY_DEFAULT_IDLE, 150, () => { //
            if (!window || typeof window.get_frame_rect !== 'function' || !window.get_compositor_private()) return GLib.SOURCE_REMOVE; // Added get_compositor_private check

            const rect = window.get_frame_rect(); //
            const center = { x: rect.x + rect.width / 2, y: rect.y + rect.height / 2 }; //
            const mon = window.get_monitor(); //
            // Use active display zones
            const zoneDef = this._zoneDetector.findTargetZone(this._activeDisplayZones, center, mon); //
            if (zoneDef) { //
                this._snapWindowToZone(window, zoneDef, false); //
                log('_onWindowCreated', `Auto-snapped "${window.get_title()}" into "${zoneDef.name || JSON.stringify(zoneDef)}"`); //
            }
            return GLib.SOURCE_REMOVE; //
        });
    }

    _onGrabOpBegin(display, window, op) {
        const isMouseMoving = (op & Meta.GrabOp.MOVING) !== 0; //
        const isKeyboardMoving = (op & Meta.GrabOp.KEYBOARD_MOVING) !== 0; //

        const evasionKeyMask = this._getEvasionKeyMask(); //
        const [, , mods] = global.get_pointer(); //
        const isEvasionKeyHeld = evasionKeyMask !== 0 && (mods & evasionKeyMask) !== 0; //

        delete window._autoZonerEvasionBypass; //
        if (isEvasionKeyHeld) { //
            window._autoZonerEvasionBypass = true; //
            const keyName = this._settingsManager.getSnapEvasionKeyName(); //
            log('_onGrabOpBegin', `${keyName} key is held for "${window.get_title()}", bypassing highlights and original rect store.`); //
            this._highlightManager?.stopUpdating(); //
            return; //
        }

        if (!(isMouseMoving || isKeyboardMoving)) { //
            log('_onGrabOpBegin', `Operation is not a move (op: ${op}), stopping highlights and skipping further setup.`); //
            this._highlightManager?.stopUpdating(); //
            return; //
        }

        if (!window || !window.get_compositor_private() || window.is_fullscreen() || window.get_window_type() !== Meta.WindowType.NORMAL) // Added get_compositor_private check
            return; //
        if (this._settingsManager.isRestoreOnUntileEnabled() && !window._autoZonerOriginalRect) { //
            window._autoZonerOriginalRect = window.get_frame_rect(); //
            log('_onGrabOpBegin', `Stored original rect for "${window.get_title()}" during normal move.`); //
        }
        this._highlightManager?.startUpdating(); //
    }

    _onGrabOpEnd(display, window, op) {
        this._highlightManager?.stopUpdating(); //

        const wasEvasionBypassActiveAtStart = window._autoZonerEvasionBypass; //
        delete window._autoZonerEvasionBypass; //

        const evasionKeyMask = this._getEvasionKeyMask(); //
        const [, , modsAtEnd] = global.get_pointer(); //
        const isEvasionKeyHeldAtEnd = evasionKeyMask !== 0 && (modsAtEnd & evasionKeyMask) !== 0; //
        if (isEvasionKeyHeldAtEnd || wasEvasionBypassActiveAtStart) { //
            const keyName = this._settingsManager.getSnapEvasionKeyName(); //
            log('_onGrabOpEnd', `${keyName} key is (or was at start) held for "${window.get_title()}", bypassing snap logic. Window remains at current pos.`); //
            if (window._autoZonerIsZoned) { //
                this._unsnapWindow(window, /* keepCurrentPosition = */ true); //
            } else { //
                delete window._autoZonerOriginalRect; //
            }
            return; //
        }

        if (op === Meta.GrabOp.MOVING || op === Meta.GrabOp.KEYBOARD_MOVING) { //
            log('_onGrabOpEnd', `Operation is MOVING or KEYBOARD_MOVING (op: ${op}), proceeding to normal snap logic.`); //
        } else if ((op & ALL_RESIZING_OPS) !== 0) { //
            log('_onGrabOpEnd', `Operation is RESIZING (op: ${op}) and not a direct move type, skipping snap.`); //
            return; //
        } else { //
            log('_onGrabOpEnd', `Operation is UNKNOWN or not a snappable type (op: ${op}), skipping snap.`); //
            return; //
        }

        if (!this._settingsManager.isZoningEnabled()) return; //
        if (!window || !window.get_compositor_private() || window.is_fullscreen() || window.get_window_type() !== Meta.WindowType.NORMAL) { // Added get_compositor_private check
            this._unsnapWindow(window); //
            return; //
        }

        const [pointerX, pointerY] = global.get_pointer(); //
        const hitRect = new Mtk.Rectangle({ x: pointerX, y: pointerY, width: 1, height: 1 }); //
        let mon = global.display.get_monitor_index_for_rect(hitRect); //
        if (mon < 0) //
            mon = window.get_monitor(); //
        if (mon < 0 || mon >= Main.layoutManager.monitors.length) { //
            mon = Main.layoutManager.primaryIndex; //
        }

        const center = { x: pointerX, y: pointerY }; //
        // Use active display zones
        const zoneDef = this._zoneDetector.findTargetZone(this._activeDisplayZones, center, mon); //
        if (zoneDef) { //
            this._snapWindowToZone(window, zoneDef, true); //
            //log('_onGrabOpEnd', `Snapped "${window.get_title()}" into "${zoneDef.name || JSON.stringify(zoneDef)}"`); //
            
            // MODIFIED LOG LINE STARTS HERE
            const app = this._windowTracker.get_window_app(window);
            const appName = app ? app.get_name() : 'N/A'; // Default tab name
            const appId = app ? app.get_id() : 'N/A';
            const wmClass = window.get_wm_class() || 'N/A';
            const wmClassInstance = window.get_wm_class_instance() || 'N/A';
                        
            log('_onGrabOpEnd',
                `\nSnapped "${window.get_title()}" into "${zoneDef.name || JSON.stringify(zoneDef)}". ` +
                `App Info: 1. Name: "${appName}", 2. App ID: "${appId}" , ` +
                `3. WM_CLASS: "${wmClass}", 4. WM_CLASS_INSTANCE: "${wmClassInstance}"`
            );
            // MODIFIED LOG LINE ENDS HERE
            
            
        } else { //
            this._unsnapWindow(window); //
        }
    }
    
    _getZoneTabBar(zoneId, monitorIndex, zoneDef) {
        let bar = this._tabBars[zoneId]; //
        if (!bar) { //
            bar = new TabBar(zoneId, zoneDef, win => this._activateWindow(zoneId, win), this._settingsManager, this); // Pass zoneDef and this (WindowManager) //
            this._tabBars[zoneId] = bar; //
            Main.uiGroup.add_child(bar); //
        }
        const wa = Main.layoutManager.getWorkAreaForMonitor(monitorIndex); //
        const x = wa.x + zoneDef.x; //
        const y = wa.y + Math.max(0, zoneDef.y); //
        const height = this._settingsManager.getTabBarHeight(); //
        bar.set_position(x, y); //
        bar.set_size(zoneDef.width, height); //
        bar.set_style(`height: ${height}px;`); //
        return bar; //
    }

    snapAllWindowsToZones(previouslySnappedWindowsByZone = null) {
        if (!this._settingsManager.isZoningEnabled()) return; //
        log('snapAllWindowsToZones', `Snapping all windows. Previously snapped: ${previouslySnappedWindowsByZone ? Object.keys(previouslySnappedWindowsByZone).length : 0} zones.`);

        // Ensure active zones are current
        if (this._activeDisplayZones.length === 0) {
            this._rebuildActiveDisplayZones();
        }
        const currentActiveZones = this._activeDisplayZones;

        // If previous state is provided, try to restore windows to their *new* corresponding zones
        if (previouslySnappedWindowsByZone) {
            for (const oldZoneId in previouslySnappedWindowsByZone) {
                const windowsInOldZone = previouslySnappedWindowsByZone[oldZoneId];
                const splitState = this._splitStates.get(oldZoneId); // Check if the *original* zone was split

                windowsInOldZone.forEach(win => {
                    // MODIFIED LINE BELOW
                    if (!win || !win.get_compositor_private() || win.is_fullscreen() || win.get_window_type() !== Meta.WindowType.NORMAL) return;

                    let targetZoneDef = null;
                    if (splitState && splitState.isActive) {
                        // If the original zone is now split, windows that were in it are considered for the upper half by default
                        targetZoneDef = currentActiveZones.find(z => z.id === oldZoneId && z.isSplitParent);
                    } else {
                        // If not split, or if it was a child zone that got removed (handled by parent merge)
                        // Try to find the zone by its ID (which might have been a child ID)
                        targetZoneDef = currentActiveZones.find(z => z.id === oldZoneId);
                    }

                    if (targetZoneDef) {
                        this._snapWindowToZone(win, targetZoneDef, false);
                    } else {
                        // Fallback: try to snap based on current position if no direct mapping found
                        this._snapWindowByCurrentPosition(win, currentActiveZones);
                    }
                });
            }
        }

        // Snap any remaining/newly created windows not handled by the above
        global.get_window_actors().forEach(actor => { //
            const win = actor.get_meta_window(); //
            // Only process if not already snapped by the logic above
            if (!win || !win.get_compositor_private() || win._autoZonerIsZoned || win.is_fullscreen() || win.get_window_type() !== Meta.WindowType.NORMAL) // Added get_compositor_private check
                return; //
            this._snapWindowByCurrentPosition(win, currentActiveZones);
        });
        log('snapAllWindowsToZones', 'Finished snapping all windows.');
    }

    _snapWindowByCurrentPosition(win, zonesToSearch) {
        const rect = win.get_frame_rect(); //
        const center = { x: rect.x + rect.width / 2, y: rect.y + rect.height / 2 }; //
        let mon = win.get_monitor(); //
        if (mon < 0 || mon >= Main.layoutManager.monitors.length) { //
            mon = Main.layoutManager.primaryIndex; //
        }

        let zoneDef = this._zoneDetector.findTargetZone(zonesToSearch, center, mon); //
        if (!zoneDef) { // Fallback to closest zone on the same monitor //
            const wa = Main.layoutManager.getWorkAreaForMonitor(mon); //
            let bestDistanceSq = Infinity;
            let closestZone = null;
            zonesToSearch.filter(z => z.monitorIndex === mon).forEach(zDef => { //
                const zoneCenterX = wa.x + zDef.x + zDef.width / 2; //
                const zoneCenterY = wa.y + zDef.y + zDef.height / 2; //
                const dx = zoneCenterX - center.x; //
                const dy = zoneCenterY - center.y; //
                const distSq = dx * dx + dy * dy; //
                if (distSq < bestDistanceSq) { //
                    bestDistanceSq = distSq; //
                    closestZone = zDef; //
                }
            });
            zoneDef = closestZone; //
        }
        if (zoneDef) this._snapWindowToZone(win, zoneDef, false); //
    }

    _snapWindowToZone(window, zoneDef, isGrabOpContext = false) {
        const zoneId = zoneDef.id || zoneDef.name || JSON.stringify(zoneDef); //
        const oldZoneId = window._autoZonerZoneId; //

        if (oldZoneId && oldZoneId !== zoneId) { //
            // Find from active zones, as oldZoneId might be a dynamic child ID
            const oldZoneDef = this._activeDisplayZones.find(z => z.id === oldZoneId); //
            if (oldZoneDef) { //
                this._getZoneTabBar(oldZoneId, oldZoneDef.monitorIndex, oldZoneDef).removeWindow(window); //
                this._snappedWindows[oldZoneId] = (this._snappedWindows[oldZoneId] || []).filter(w => w !== window); //
            }
        }

        if (window.get_maximized && window.get_maximized()) //
            window.unmaximize(Meta.MaximizeFlags.BOTH); //
        if (this._settingsManager.isRestoreOnUntileEnabled() && !window._autoZonerOriginalRect) { //
            // This check assumes _onGrabOpBegin correctly decided not to store if evasion was active.
            // If we reach here, it's a normal snap or a snap initiated not from a grab op where evasion matters. //
            window._autoZonerOriginalRect = window.get_frame_rect(); //
            log('_snapWindowToZone', `Stored original rect for "${window.get_title()}"`); //
        }

        this._snappedWindows[zoneId] = this._snappedWindows[zoneId] || []; //
        if (!this._snappedWindows[zoneId].includes(window)) //
            this._snappedWindows[zoneId].push(window); //
        this._cycleIndexByZone[zoneId] = (this._snappedWindows[zoneId].length - 1); //
        window._autoZonerIsZoned = true; //
        window._autoZonerZoneId = zoneId; // zoneId here is zoneDef.id //

        const wa = Main.layoutManager.getWorkAreaForMonitor(zoneDef.monitorIndex); //
        const barHeight = this._settingsManager.getTabBarHeight(); //
        const minWindowDim = 50; //
        const zoneGap = this._settingsManager.getZoneGapSize(); //
        let gapPosOffset = 0; let gapSizeReduction = 0; //
        if (zoneGap > 0) { gapPosOffset = Math.floor(zoneGap / 2); gapSizeReduction = zoneGap; //
        }

        const slotX = wa.x + zoneDef.x; //
        let slotW = Math.min(zoneDef.width, (wa.x + wa.width) - slotX); //
        slotW = Math.max(slotW, minWindowDim); //
        const actualZoneYInWorkArea = zoneDef.y; //
        const clippedZoneYInWorkArea = Math.max(0, actualZoneYInWorkArea); //
        const yClippage = clippedZoneYInWorkArea - actualZoneYInWorkArea; //
        const slotContentY = wa.y + clippedZoneYInWorkArea + barHeight; //
        let slotH = Math.min(zoneDef.height - yClippage - barHeight, (wa.y + wa.height) - slotContentY); //
        slotH = Math.max(slotH, minWindowDim); //
        const gappedWindowX = slotX + gapPosOffset; //
        let gappedWindowW = Math.max(slotW - gapSizeReduction, minWindowDim); //
        const gappedWindowY = slotContentY + gapPosOffset; //
        let gappedWindowH = Math.max(slotH - gapSizeReduction, minWindowDim); //
        const tabBarX = wa.x + zoneDef.x + (zoneGap > 0 ? gapPosOffset : 0); //
        const tabBarY = wa.y + clippedZoneYInWorkArea + (zoneGap > 0 ? gapPosOffset : 0); //
        const tabBarW = gappedWindowW; //
        window.move_resize_frame(false, gappedWindowX, gappedWindowY, gappedWindowW, gappedWindowH); //
        const tabBar = this._getZoneTabBar(zoneId, zoneDef.monitorIndex, zoneDef); //
        tabBar.set_position(tabBarX, tabBarY); //
        tabBar.set_size(tabBarW, barHeight); //
        if (!isGrabOpContext) {  //
            GLib.timeout_add(GLib.PRIORITY_DEFAULT_IDLE, 150, () => { //
                if (window && window.get_compositor_private() && typeof window.get_frame_rect === 'function' && // Added get_compositor_private check
                    window._autoZonerZoneId === zoneId && !window.is_fullscreen() && //
                    window.get_maximized() === Meta.MaximizeFlags.NONE) { //
                    const currentRect = window.get_frame_rect(); //
                    if (currentRect.x !== gappedWindowX || currentRect.y !== gappedWindowY || //
                        currentRect.width !== gappedWindowW || currentRect.height !== gappedWindowH) { //
                        log('_snapWindowToZone[DelayedCheck]', `Window "${window.get_title()}" mismatch. 
Re-applying.`); //
                        window.move_resize_frame(false, gappedWindowX, gappedWindowY, gappedWindowW, gappedWindowH); //
                        const delayedTabBar = this._getZoneTabBar(zoneId, zoneDef.monitorIndex, zoneDef); //
                        delayedTabBar.set_position(tabBarX, tabBarY); //
                        delayedTabBar.set_size(tabBarW, barHeight); //
                    }
                }
                return GLib.SOURCE_REMOVE; //
            });
        }
        tabBar.addWindow(window); //
        this._activateWindow(zoneId, window); //
    }

    _unsnapWindow(window, keepCurrentPosition = false) {
        const oldZoneId = window._autoZonerZoneId; //
        // Only proceed if it was actually zoned OR if we're explicitly keeping position (e.g. Ctrl-drag of a non-zoned window needs its OriginalRect cleared)
        if (!oldZoneId && !keepCurrentPosition) { //
            return; //
        }
        log('_unsnapWindow', `Unsnapping "${window.get_title()}" from zone "${oldZoneId || 'N/A'}". keepCurrentPosition=${keepCurrentPosition}`); //
        if (!keepCurrentPosition && this._settingsManager.isRestoreOnUntileEnabled() && window._autoZonerOriginalRect) { //
            const o = window._autoZonerOriginalRect; //
            window.move_resize_frame(false, o.x, o.y, o.width, o.height); //
            delete window._autoZonerOriginalRect;  //
        } else if (keepCurrentPosition) { //
            delete window._autoZonerOriginalRect; //
        }

        if (oldZoneId) {  //
            delete window._autoZonerIsZoned; //
            delete window._autoZonerZoneId; //

            const oldZoneDef = this._activeDisplayZones.find(z => z.id === oldZoneId); // Find from active zones //
            if (oldZoneDef) { //
                const tabBar = this._tabBars[oldZoneId]; //
                if (tabBar) { //
                    tabBar.removeWindow(window); //
                }
            }
            this._snappedWindows[oldZoneId] = (this._snappedWindows[oldZoneId] || []).filter(w => w !== window); //
            if (this._snappedWindows[oldZoneId] && this._snappedWindows[oldZoneId].length === 0) { //
                if (this._tabBars[oldZoneId]) { //
                    this._tabBars[oldZoneId].destroy(); //
                    delete this._tabBars[oldZoneId]; //
                }
                delete this._cycleIndexByZone[oldZoneId]; //
            }
        }
    }

    cycleWindowsInCurrentZone() {
        const focus = global.display.focus_window; //
        if (!focus || !focus._autoZonerZoneId || !focus.get_compositor_private()) { // Added get_compositor_private check
            log('cycle', 'No valid zoned window focused; aborting.'); //
            return; //
        }
        const zoneId = focus._autoZonerZoneId; //
        const list = this._snappedWindows[zoneId] || []; //
        if (list.length < 2) { //
            log('cycle', `Zone "${zoneId}" has ${list.length} window(s); skipping cycle.`); //
            return; //
        }
        let idx = (this._cycleIndexByZone[zoneId] + 1) % list.length; //
        this._cycleIndexByZone[zoneId] = idx; //
        const nextWin = list[idx]; //
        if (!nextWin || !nextWin.get_compositor_private()) { log('cycle', 'Next window in cycle is invalid.'); return; } // Added check
        log('cycle', `Cycling to [${idx}] "${nextWin.get_title()}" in zone "${zoneId}".`); //
        this._activateWindow(zoneId, nextWin); //
    }

    cycleWindowsInCurrentZoneBackward() {
        const focus = global.display.focus_window; //
        if (!focus || !focus._autoZonerZoneId || !focus.get_compositor_private()) { // Added get_compositor_private check
            log('cycle-backward', 'No valid zoned window focused; aborting.'); //
            return; //
        }
        const zoneId = focus._autoZonerZoneId; //
        const list = this._snappedWindows[zoneId] || []; //
        if (list.length < 2) { //
            log('cycle-backward', `Zone "${zoneId}" has ${list.length} window(s); skipping cycle.`); //
            return; //
        }
        let idx = (this._cycleIndexByZone[zoneId] - 1 + list.length) % list.length; //
        this._cycleIndexByZone[zoneId] = idx; //
        const prevWin = list[idx]; //
        if (!prevWin || !prevWin.get_compositor_private()) { log('cycle-backward', 'Previous window in cycle is invalid.'); return; } // Added check
        log('cycle-backward', `Cycling backward to [${idx}] "${prevWin.get_title()}" in zone "${zoneId}".`); //
        this._activateWindow(zoneId, prevWin); //
    }

    _activateWindow(zoneId, window) {
        if (!window || !window.get_compositor_private()) { // Added get_compositor_private check
            log('_activateWindow', 'Attempted to activate an invalid window.');
            return;
        }
        const list = this._snappedWindows[zoneId] || []; //
        const currentWindowIndex = list.indexOf(window); //
        if (currentWindowIndex !== -1) { //
            this._cycleIndexByZone[zoneId] = currentWindowIndex; //
        }
        const now = global.get_current_time(); //
        window.activate(now); //
        this._tabBars[zoneId]?.highlightWindow(window); //
    }

    cleanupWindowProperties() {
        global.get_window_actors().forEach(actor => { //
            const w = actor.get_meta_window(); //
            if (w) { //
                delete w._autoZonerIsZoned; //
                delete w._autoZonerOriginalRect; //
                delete w._autoZonerZoneId; //
                delete w._autoZonerEvasionBypass;  //
            }
        });
    }

    updateAllTabAppearances() {
        log('updateAllTabAppearances', 'Requesting update for appearance of all tab bars.'); //
        for (const zoneId in this._tabBars) { //
            const tabBar = this._tabBars[zoneId]; //
            if (tabBar && typeof tabBar.refreshTabVisuals === 'function') { //
                const zoneDef = this._activeDisplayZones.find(z => z.id === zoneId); // Use active zones //
                log('updateAllTabAppearances', `Refreshing visuals for tab bar: ${zoneId}, zoneDef found: ${!!zoneDef}`); //
                if (zoneDef) { //
                    const wa = Main.layoutManager.getWorkAreaForMonitor(zoneDef.monitorIndex); //
                    const barHeight = this._settingsManager.getTabBarHeight(); //
                    const zoneGap = this._settingsManager.getZoneGapSize(); //
                    const gapPosOffset = zoneGap > 0 ? Math.floor(zoneGap / 2) : 0; //
                    const clippedZoneYInWorkArea = Math.max(0, zoneDef.y); //
                    const tabBarX = wa.x + zoneDef.x + gapPosOffset; //
                    const tabBarY = wa.y + clippedZoneYInWorkArea + gapPosOffset; //
                    const minWindowDim = 50; //
                    let slotW = Math.min(zoneDef.width, (wa.x + wa.width) - (wa.x + zoneDef.x)); //
                    slotW = Math.max(slotW, minWindowDim); //
                    let gappedWindowW = slotW - (zoneGap > 0 ? zoneGap : 0); //
                    gappedWindowW = Math.max(gappedWindowW, minWindowDim); //
                    const tabBarW = gappedWindowW; //

                    // Update TabBar's internal zoneDef if it has changed (e.g. split state)
                    tabBar._zoneDef = zoneDef;
                    tabBar.set_position(tabBarX, tabBarY); //
                    tabBar.set_size(tabBarW, barHeight); //
                    tabBar.set_style(`height: ${barHeight}px;`); //
                    tabBar.refreshTabVisuals(); // Call refreshTabVisuals after properties are set
                }
            }
        }
        log('updateAllTabAppearances', 'Finished updating all tab appearances.');
    }

    toggleZoneSplit(parentZoneIdToToggle) {
        log('toggleZoneSplit', `Toggling split for zone ID: ${parentZoneIdToToggle}`);
        const baseZoneDef = this._settingsManager.getZones().find(z => (z.id || z.name || JSON.stringify(z)) === parentZoneIdToToggle);

        if (!baseZoneDef) {
            log('toggleZoneSplit', `Error: Base zone definition not found for ID: ${parentZoneIdToToggle}`);
            return;
        }
        // Ensure baseZoneDef has an 'id' if it's relying on name/stringify
        const parentId = baseZoneDef.id || baseZoneDef.name || JSON.stringify(baseZoneDef);

        let splitState = this._splitStates.get(parentId);

        if (splitState && splitState.isActive) { // MERGE
            log('toggleZoneSplit', `Merging zone ${parentId} (child: ${splitState.childZoneId})`);
            // Windows in childZoneId will be re-evaluated by snapAllWindowsToZones and should move to the parent
            this._splitStates.delete(parentId);
        } else { // SPLIT
            const originalHeight = baseZoneDef.height; // This should be the full height from gsettings
            const childZoneId = parentId + "_lower"; // Simple ID generation
            log('toggleZoneSplit', `Splitting zone ${parentId}. Original height: ${originalHeight}. Child ID: ${childZoneId}`);
            this._splitStates.set(parentId, {
                originalHeight: originalHeight, // Store the original full height
                childZoneId: childZoneId,
                isActive: true
            });
        }
        this._rebuildAndResnapAll();
    }

    destroy() {
        this._disconnectSignals(); //
        Object.values(this._tabBars).forEach(bar => bar.destroy()); //
        this._tabBars = {}; //
        this._splitStates.clear();
        this._activeDisplayZones = [];
        this.cleanupWindowProperties(); //
        log('destroy', 'Destroyed.'); //
    }

    // Called from extension.js enable/disable or when settings change fundamentally
    refreshZonesAndLayout() {
        this._splitStates.clear(); // Clear any previous dynamic splits
        this._rebuildAndResnapAll();
    }
}



===== FILE: ./modules/TabDragger.js =====
// ./modules/TabDragger.js
import GLib from 'gi://GLib';
import Clutter from 'gi://Clutter';
import St from 'gi://St';
import * as Main from 'resource:///org/gnome/shell/ui/main.js';

const DRAG_THRESHOLD = 10;
const HOLD_TIMEOUT = 250; // Milliseconds

export class TabDragger {
    constructor(tabBar, onTabClicked) {
        this._tabBar = tabBar;
        this._onTabClicked = onTabClicked; // To reactivate tab after drop
        this._dragInfo = null;
        this._pressTimeoutId = 0;
    }

    initPointerHandlers(actor, win) {
        actor._pressEventDetails = null;
        // actor._pressTimeoutId = 0; // Managed by TabBar instance or dedicated Tab instance if it held this state

        actor.connect('button-press-event', (a, event) => {
            const source = event.get_source();
            if (source && typeof source.has_style_class_name === 'function' && source.has_style_class_name('zone-tab-close-button')) {
                return Clutter.EVENT_PROPAGATE;
            }
            if (event.get_button() !== 1) return Clutter.EVENT_PROPAGATE;

            actor.grab_key_focus();

            if (actor._pressTimeoutId) GLib.Source.remove(actor._pressTimeoutId); // [cite: 280]

            const [pressEventX, pressEventY] = event.get_coords();
            actor._pressEventDetails = { time: event.get_time(), x: pressEventX, y: pressEventY, rawEvent: event }; // [cite: 280]

            actor._pressTimeoutId = GLib.timeout_add(GLib.PRIORITY_DEFAULT, HOLD_TIMEOUT, () => { // [cite: 280]
                actor._pressTimeoutId = 0; // [cite: 280]
                if (actor._pressEventDetails) { // [cite: 281]
                    this._beginDrag(actor, actor._pressEventDetails.rawEvent); // [cite: 281]
                }
                return GLib.SOURCE_REMOVE; // [cite: 281]
            });
            return Clutter.EVENT_STOP; // [cite: 282]
        });

        actor.connect('motion-event', (a, event) => {
            if ((event.get_state() & Clutter.ModifierType.BUTTON1_MASK) && actor._pressEventDetails) { // [cite: 282]
                if (!this._dragInfo || !this._dragInfo.isDragging) { // [cite: 282]
                    const [currentX, currentY] = event.get_coords();
                    const { x: startX, y: startY } = actor._pressEventDetails;
                    if (Math.abs(currentX - startX) > DRAG_THRESHOLD || Math.abs(currentY - startY) > DRAG_THRESHOLD) { // [cite: 283]
                        if (actor._pressTimeoutId) { // [cite: 283]
                            GLib.Source.remove(actor._pressTimeoutId); // [cite: 283]
                            actor._pressTimeoutId = 0; // [cite: 284]
                        }
                        this._beginDrag(actor, actor._pressEventDetails.rawEvent); // [cite: 284]
                    }
                }
            }
            return Clutter.EVENT_PROPAGATE; // [cite: 285]
        });

        actor.connect('button-release-event', (a, event) => {
            const source = event.get_source();
            if (source && typeof source.has_style_class_name === 'function' && source.has_style_class_name('zone-tab-close-button')) {
                return Clutter.EVENT_PROPAGATE;
            }
            if (event.get_button() !== 1) return Clutter.EVENT_PROPAGATE; // [cite: 286]

            const wasPressPending = !!actor._pressTimeoutId; // [cite: 287]
            if (actor._pressTimeoutId) { // [cite: 287]
                GLib.Source.remove(actor._pressTimeoutId); // [cite: 287]
                actor._pressTimeoutId = 0; // [cite: 287]
            }

            const clickOccurred = wasPressPending && (!this._dragInfo || !this._dragInfo.isDragging); // [cite: 287]

            if (clickOccurred) {
                this._onTabClicked(win); // [cite: 288]
            }
            actor._pressEventDetails = null; // [cite: 288]
            // If a drag operation was completed, _onDragRelease would handle it.
            // This primarily handles the click scenario.
            return Clutter.EVENT_STOP; // [cite: 288]
        });
    }

    _beginDrag(actor, pressEvent) {
        if (this._dragInfo && this._dragInfo.isDragging) return; // [cite: 289]
        if (!actor || actor.get_parent() !== this._tabBar) { // [cite: 290]
            console.warn("TabDragger: _beginDrag called for an actor not in the managed TabBar or null actor.");
            if (actor && actor._pressTimeoutId) GLib.Source.remove(actor._pressTimeoutId); // [cite: 291]
            if (actor) actor._pressEventDetails = null; // [cite: 291]
            return; // [cite: 291]
        }

        if (actor._pressTimeoutId) { // [cite: 292]
            GLib.Source.remove(actor._pressTimeoutId); // [cite: 292]
            actor._pressTimeoutId = 0; // [cite: 293]
        }
        actor._pressEventDetails = null; // [cite: 293]

        const [pointerScreenX, pointerScreenY] = pressEvent.get_coords(); // [cite: 293]
        const actorAllocationInTabBar = actor.get_allocation_box(); // [cite: 294]
        const [tabBarScreenX, tabBarScreenY] = this._tabBar.get_transformed_position(); // [cite: 294]

        const actorInitialScreenX = tabBarScreenX + actorAllocationInTabBar.x1; // [cite: 294]
        const actorInitialScreenY = tabBarScreenY + actorAllocationInTabBar.y1; // [cite: 295]

        const originalIndex = this._tabBar.get_children().indexOf(actor); // [cite: 295]

        const actorWidth = actor.get_width(); // [cite: 295]
        const actorHeight = actor.get_height(); // [cite: 295]
        const slotActor = new St.Bin({ style_class: 'zone-tab-drag-slot', width: actorWidth, height: actorHeight }); // [cite: 296]

        actor.set_opacity(200); // [cite: 296]
        this._tabBar.remove_child(actor); // [cite: 296]
        Main.uiGroup.add_child(actor); // [cite: 296]
        actor.set_position(actorInitialScreenX, actorInitialScreenY); // [cite: 296]
        try { // [cite: 297]
            if (typeof actor.raise_top === 'function') { // [cite: 297]
                actor.raise_top(); // [cite: 297]
            } else {
                const parent = actor.get_parent(); // [cite: 298]
                if (parent && typeof parent.set_child_above_sibling === 'function') { // [cite: 299]
                    parent.set_child_above_sibling(actor, null); // [cite: 299]
                }
            }
        } catch (e) {
            console.error("TabDragger: Error trying to raise actor.", e); // [cite: 300]
        }

        this._tabBar.insert_child_at_index(slotActor, originalIndex); // [cite: 301]
        this._dragInfo = { // [cite: 302]
            isDragging: true, // [cite: 302]
            draggedActor: actor, // [cite: 302]
            slotActor: slotActor, // [cite: 302]
            originalIndex: originalIndex, // [cite: 302]
            actorGrabOffsetX: pointerScreenX - actorInitialScreenX, // [cite: 302]
            actorGrabOffsetY: pointerScreenY - actorInitialScreenY, // [cite: 303]
            motionId: global.stage.connect('motion-event', this._onDragMotion.bind(this)), // [cite: 303]
            releaseId: global.stage.connect('button-release-event', this._onDragRelease.bind(this)), // [cite: 303]
        };
        this._tabBar.requestLayoutUpdate(true); // [cite: 304]
    }

    _onDragMotion(stage, event) {
        if (!this._dragInfo || !this._dragInfo.isDragging) return Clutter.EVENT_PROPAGATE; // [cite: 304]
        const [currentPointerScreenX, currentPointerScreenY] = event.get_coords(); // [cite: 305]
        this._dragInfo.draggedActor.set_position( // [cite: 305]
            currentPointerScreenX - this._dragInfo.actorGrabOffsetX,
            currentPointerScreenY - this._dragInfo.actorGrabOffsetY
        );
        const [tabBarScreenX, ] = this._tabBar.get_transformed_position(); // [cite: 306]
        const pointerXInTabBar = currentPointerScreenX - tabBarScreenX; // [cite: 306]

        let newSlotIndex = 0; // [cite: 306]
        const currentChildren = this._tabBar.get_children(); // [cite: 306]
        const currentSlotActualIndex = currentChildren.indexOf(this._dragInfo.slotActor); // [cite: 307]

        if (currentSlotActualIndex === -1) { // [cite: 307]
            console.error("TabDragger: Slot actor not found in TabBar during drag motion."); // [cite: 307]
            this.cancelDrag(true); // [cite: 308]
            return Clutter.EVENT_STOP; // [cite: 308]
        }

        let visualChildIndex = 0; // [cite: 308]
        for (let i = 0; i < currentChildren.length; i++) { // [cite: 309]
            const child = currentChildren[i]; // [cite: 309]
            if (child === this._dragInfo.slotActor) continue; // [cite: 310]

            const childAllocation = child.get_allocation_box(); // [cite: 310]
            const childMidX = childAllocation.x1 + childAllocation.get_width() / 2; // [cite: 310]
            if (pointerXInTabBar > childMidX) { // [cite: 311]
                newSlotIndex = visualChildIndex + 1; // [cite: 311]
            }
            visualChildIndex++; // [cite: 312]
        }

        if (currentSlotActualIndex !== newSlotIndex) { // [cite: 313]
            const tempSlot = this._dragInfo.slotActor; // [cite: 313]
            if (tempSlot.get_parent() === this._tabBar) { // [cite: 314]
                this._tabBar.set_child_at_index(tempSlot, newSlotIndex); // [cite: 314]
            } else {
                console.error("TabDragger: Slot actor lost parentage during drag motion."); // [cite: 315]
                this.cancelDrag(true); // [cite: 316]
                return Clutter.EVENT_STOP; // [cite: 316]
            }
            this._tabBar.requestLayoutUpdate(true); // [cite: 316]
        }
        return Clutter.EVENT_STOP; // [cite: 317]
    }

    _onDragRelease(stage, event) {
        if (!this._dragInfo || !this._dragInfo.isDragging || event.get_button() !== 1) { // [cite: 318]
            if (this._dragInfo) { // [cite: 318]
                if (this._dragInfo.motionId) global.stage.disconnect(this._dragInfo.motionId); // [cite: 318]
                if (this._dragInfo.releaseId) global.stage.disconnect(this._dragInfo.releaseId); // [cite: 319]
            }
            this._dragInfo = null; // [cite: 319]
            return Clutter.EVENT_PROPAGATE; // [cite: 319]
        }

        const { draggedActor, slotActor, motionId, releaseId, originalIndex } = this._dragInfo; // [cite: 320]
        if (motionId) global.stage.disconnect(motionId); // [cite: 320]
        if (releaseId) global.stage.disconnect(releaseId); // [cite: 321]

        let finalInsertionIndex = -1; // [cite: 321]
        if (slotActor && slotActor.get_parent() === this._tabBar) { // [cite: 321]
            finalInsertionIndex = this._tabBar.get_children().indexOf(slotActor); // [cite: 321]
        } else if (slotActor) {
            console.warn("TabDragger: Slot actor not parented correctly at drag release."); // [cite: 322]
            finalInsertionIndex = originalIndex; // Fallback to original index [cite: 323]
        } else {
            finalInsertionIndex = originalIndex; // [cite: 323]
        }

        if (slotActor) { // [cite: 324]
            if (slotActor.get_parent() === this._tabBar) this._tabBar.remove_child(slotActor); // [cite: 324]
            slotActor.destroy(); // [cite: 325]
        }

        if (draggedActor) { // [cite: 325]
            if (draggedActor.get_parent() === Main.uiGroup) Main.uiGroup.remove_child(draggedActor); // [cite: 325]
            const numChildrenAfterSlotRemoval = this._tabBar.get_n_children(); // [cite: 326]
            const insertionIndex = Math.max(0, Math.min(finalInsertionIndex, numChildrenAfterSlotRemoval)); // [cite: 326]

            this._tabBar.insert_child_at_index(draggedActor, insertionIndex); // [cite: 326]
            draggedActor.set_opacity(255); // [cite: 326]
            draggedActor.set_translation(0, 0, 0); // [cite: 326]

            const droppedWindow = draggedActor._tabWindow; // [cite: 326]
            if (droppedWindow) { // [cite: 327]
                this._onTabClicked(droppedWindow); // [cite: 327]
                if (draggedActor.can_focus) draggedActor.grab_key_focus(); // [cite: 328]
            }
        }

        this._dragInfo = null; // [cite: 328]
        this._tabBar.requestLayoutUpdate(true); // [cite: 329]
        return Clutter.EVENT_STOP; // [cite: 329]
    }

    cancelDrag(forceCleanup = false) {
        // Clean up any pending press timeouts on individual tab actors
        this._tabBar.getTabActors().forEach(actor => { // [cite: 329]
            if (actor._pressTimeoutId) {
                GLib.Source.remove(actor._pressTimeoutId);
                actor._pressTimeoutId = 0;
            }
            actor._pressEventDetails = null;
        });

        if (this._pressTimeoutId) { // [cite: 330]
            GLib.Source.remove(this._pressTimeoutId); // [cite: 330]
            this._pressTimeoutId = 0; // [cite: 331]
        }

        if (this._dragInfo && (this._dragInfo.isDragging || forceCleanup)) { // [cite: 331]
            const { draggedActor, slotActor, originalIndex, motionId, releaseId } = this._dragInfo; // [cite: 331]
            if (motionId) global.stage.disconnect(motionId); // [cite: 332]
            if (releaseId) global.stage.disconnect(releaseId); // [cite: 332]

            if (draggedActor) { // [cite: 332]
                if (draggedActor.get_parent() === Main.uiGroup) { // [cite: 332]
                    Main.uiGroup.remove_child(draggedActor); // [cite: 332]
                    // Check if tab still exists in TabBar's data model
                    const isStillManaged = this._tabBar.hasWindow(draggedActor._tabWindow); // [cite: 333]
                    if (!forceCleanup && isStillManaged && this._tabBar.get_parent()) { // [cite: 333]
                        const childrenCount = this._tabBar.get_n_children(); // [cite: 333]
                        const reinsertIdx = Math.min(originalIndex, childrenCount); // [cite: 334]
                        if (draggedActor.get_parent() !== this._tabBar) { // [cite: 334]
                           this._tabBar.insert_child_at_index(draggedActor, reinsertIdx); // [cite: 334]
                        }
                    } else if (!isStillManaged && !forceCleanup) { // If no longer managed (e.g. window closed during drag)
                        //draggedActor.destroy(); // The TabBar's removeWindow should handle this
                    }
                }
                draggedActor.set_opacity(255); // [cite: 336]
                draggedActor.set_translation(0, 0, 0); // [cite: 337]
            }
            if (slotActor) { // [cite: 337]
                if (slotActor.get_parent() === this._tabBar) this._tabBar.remove_child(slotActor); // [cite: 337]
                slotActor.destroy(); // [cite: 338]
            }
        }
        this._dragInfo = null; // [cite: 338]
        if (this._tabBar.get_parent() && (forceCleanup || (this._tabBar.visible && this._tabBar.get_n_children() > 0))) { // [cite: 339]
            this._tabBar.requestLayoutUpdate(true); // [cite: 339]
        }
    }

    isDragging() {
        return this._dragInfo && this._dragInfo.isDragging;
    }

    getDraggedActor() {
        return this._dragInfo ? this._dragInfo.draggedActor : null;
    }


    destroy() {
        this.cancelDrag(true);
        // Any other specific cleanup for TabDragger
    }
}



===== FILE: ./modules/ZoneDetector.js =====
import * as Main from 'resource:///org/gnome/shell/ui/main.js'; // [cite: 481]
const log = (prefix, msg) => console.log(`[AutoZoner.ZoneDetector.${prefix}] ${msg}`); // [cite: 481]

function isPointInsideRect(point, rect) {
    const check = point.x >= rect.x && point.x <= rect.x + rect.width && // [cite: 481]
                  point.y >= rect.y && point.y <= rect.y + rect.height; // [cite: 481]
    // log('isPointInsideRect', `Point: ${JSON.stringify(point)}, Rect: ${JSON.stringify(rect)}, Result: ${check}`); // [cite: 482]
    return check; // [cite: 482]
}

function getMonitorWorkArea(monitorIndex) {
    if (monitorIndex < 0 || monitorIndex >= Main.layoutManager.monitors.length) { // [cite: 483]
        const primaryIndex = Main.layoutManager.primaryIndex; // [cite: 483]
        // log('getMonitorWorkArea', `Invalid index ${monitorIndex}, using primary ${primaryIndex}`); // [cite: 484]
        return Main.layoutManager.getWorkAreaForMonitor(primaryIndex); // [cite: 484]
    }
    // log('getMonitorWorkArea', `Using index ${monitorIndex}`); // [cite: 484]
    return Main.layoutManager.getWorkAreaForMonitor(monitorIndex); // [cite: 485]
}

export class ZoneDetector {
    constructor() {
        // log('constructor', 'Initialized'); // [cite: 485]
    }

    findTargetZone(activeZones, point, monitorIndex) { // Takes activeZones directly // [cite: 486]
        const workArea = getMonitorWorkArea(monitorIndex); // [cite: 486]
        log('findTargetZone', `Searching on monitor ${monitorIndex} (WorkArea: X:${workArea.x} Y:${workArea.y} W:${workArea.width} H:${workArea.height}) for point X:${point.x} Y:${point.y}`); // [cite: 487]
        log('findTargetZone', `Available zones for this search: ${JSON.stringify(activeZones.filter(z => z.monitorIndex === monitorIndex))}`); // [cite: 488]
        for (const zone of activeZones) { // [cite: 489]
            if (zone.monitorIndex === monitorIndex) { // [cite: 489]
                const absoluteZoneRect = { // [cite: 489]
                    x: workArea.x + zone.x, // [cite: 489]
                    y: workArea.y + zone.y, // [cite: 489]
                    width: zone.width, // [cite: 490]
                    height: zone.height // [cite: 490]
                };
                log('findTargetZone', `Checking zone "${zone.name || 'Unnamed'}": AbsRect: X:${absoluteZoneRect.x} Y:${absoluteZoneRect.y} W:${absoluteZoneRect.width} H:${absoluteZoneRect.height}`); // [cite: 491]
                if (isPointInsideRect(point, absoluteZoneRect)) { // [cite: 492]
                    log('findTargetZone', `Point IS INSIDE zone "${zone.name || 'Unnamed'}"`); // [cite: 492]
                    return zone; // [cite: 493]
                } else { // [cite: 493]
                    // log('findTargetZone', `Point is NOT inside zone "${zone.name || 'Unnamed'}"`); // [cite: 493]
                }
            }
        }
        log('findTargetZone', `No target zone found for point X:${point.x} Y:${point.y} on monitor ${monitorIndex}`); // [cite: 494]
        return null; // [cite: 495]
    }
}



===== FILE: ./modules/TabBar.js =====
// ./modules/TabBar.js
import St from 'gi://St';
import GObject from 'gi://GObject';
import Clutter from 'gi://Clutter';
import Shell from 'gi://Shell';
import GLib from 'gi://GLib';
import Pango from 'gi://Pango';
import Gio from 'gi://Gio'; // Import Gio for FileIcon
import * as Main from 'resource:///org/gnome/shell/ui/main.js';
import { TabDragger } from './TabDragger.js';
import {WindowManager} from "./WindowManager.js";

const TAB_INTERNAL_NON_LABEL_WIDTH = 50;
export class TabBar extends St.BoxLayout {
    static { GObject.registerClass(this);
    }

    constructor(zoneId, zoneDef, onTabClicked, settingsMgr, windowManager) {
        super({
            style_class: 'zone-tab-bar',
            vertical: false,
            x_expand: true,
            reactive: true,
        });
        this.show_on_add = false; 
        this._zoneId = zoneId; 
        this._zoneDef = zoneDef; 
        this._onTabClicked = onTabClicked; 
        this._settingsMgr = settingsMgr; 
        this._windowManager = windowManager; 
        this._tabsData = []; 
        this.visible = false; 
        this._windowTracker = Shell.WindowTracker.get_default(); 
        this._tabDragger = new TabDragger(this, this._onTabClicked); 
        this._needsLayoutUpdate = true; 
        this._destroyed = false; 
        this._splitButton = null;
        this._splitButtonIcon = null;


        this.connect('style-changed', () => {
            if (this._destroyed) return; 
            this._needsLayoutUpdate = true; 
            this.queue_relayout(); 
        });

        this._addSplitButton();
    }

    vfunc_allocate(box) {
        super.vfunc_allocate(box);
        if (this._destroyed) return; 
        if (this._needsLayoutUpdate || (this.visible && this.get_n_children() > 0)) { 
            this._updateTabLayout(box); 
            this._needsLayoutUpdate = false; 
        }
    }
    
    requestLayoutUpdate(needsUpdate = true) {
        if (this._destroyed) return; 
        this._needsLayoutUpdate = needsUpdate; 
        if (needsUpdate) { 
            this.queue_relayout(); 
        }
    }

    _updateSplitButtonIcon() {
        if (!this._splitButtonIcon || !this._settingsMgr || !this._zoneDef) return;

        const extPath = this._settingsMgr.getExtensionPath();
        if (!extPath) {
            console.error("[AutoZoner.TabBar] Extension path not available for custom icons.");
            // Fallback to symbolic icons if path isn't found for some reason
            this._splitButtonIcon.set_icon_name(this._zoneDef.isSplitParent ? 'view-unite-symbolic' : 'view-split-horizontal-symbolic');
            return;
        }

        let iconFileName;
        if (this._zoneDef.isSplitParent) { // Zone is currently split, button action is to merge/unsplit
            iconFileName = 'full.png';
        } else { // Zone is not split, button action is to split
            iconFileName = 'split.png';
        }

        try {
            const iconFile = Gio.File.new_for_path(GLib.build_filenamev([extPath, 'images', iconFileName]));
            if (iconFile.query_exists(null)) {
                this._splitButtonIcon.set_gicon(new Gio.FileIcon({ file: iconFile }));
            } else {
                console.warn(`[AutoZoner.TabBar] Custom icon not found: ${iconFileName}. Falling back to symbolic icon.`);
                this._splitButtonIcon.set_icon_name(this._zoneDef.isSplitParent ? 'view-unite-symbolic' : 'view-split-horizontal-symbolic');
            }
        } catch (e) {
            console.error(`[AutoZoner.TabBar] Error loading custom icon ${iconFileName}: ${e}. Falling back.`);
            this._splitButtonIcon.set_icon_name(this._zoneDef.isSplitParent ? 'view-unite-symbolic' : 'view-split-horizontal-symbolic');
        }
    }

    _addSplitButton() {
        if (this._destroyed || this._zoneDef.isSplitChild) { 
            return;
        }

        this._splitButton = new St.Button({
            style_class: 'zone-tab-bar-split-button',
            can_focus: true,
            reactive: true,
        });
        this._splitButtonIcon = new St.Icon({
            // Icon size can be set here if desired, e.g., icon_size: 16,
            // or rely on stylesheet / natural size of PNG
            style_class: 'system-status-icon', // Keeps some consistency, or use a custom class
        });
        this._updateSplitButtonIcon(); // Set initial icon using custom PNGs
        this._splitButton.set_child(this._splitButtonIcon);

        this._splitButton.connect('clicked', () => {
            if (this._windowManager && typeof this._windowManager.toggleZoneSplit === 'function') {
                this._windowManager.toggleZoneSplit(this._zoneId);
            }
        });

        this.add_child(this._splitButton); 
    }

    getTabActors() {
        if (this._destroyed) return []; 
        return this._tabsData.map(td => td.actor); 
    }

    hasWindow(win) {
        if (this._destroyed) return false; 
        return this._tabsData.some(td => td.window === win); 
    }
    
    _updateTabLayout(currentAllocationBox) {
        if (this._destroyed || !this.visible) return;
        const themeNode = this.get_theme_node();
        const allocation = currentAllocationBox || this.get_allocation_box();
        if (!allocation || allocation.get_width() === 0 || !themeNode) return;

        // Children that will flow normally (tabs and drag slot)
        const flowChildren = this.get_children().filter(c =>
            c !== this._splitButton && // Exclude split button from this flow
            (c.visible || c.style_class === 'zone-tab-drag-slot')
        );
        const numFlowChildren = flowChildren.length;

        if (numFlowChildren === 0 && (!this._splitButton || !this._splitButton.visible)) {
            return; // Nothing to lay out
        }
        
        const tabMinWidth = this._settingsMgr.getTabMinWidth();
        const tabMaxWidth = this._settingsMgr.getTabMaxWidth();
        const gapSpacing = this._settingsMgr.getTabSpacing(); // Fetches the configured gap size
        const tabCornerRadius = this._settingsMgr.getTabCornerRadius();

        // Calculate width available for flowChildren content and their CSS margins
        let availableWidth = allocation.get_width() - themeNode.get_horizontal_padding();
        
        let splitButtonReservation = 0;
        if (this._splitButton && this._splitButton.visible) {
            splitButtonReservation = this._splitButton.get_preferred_width(-1)[1];
            if (numFlowChildren > 0) { // If there are tabs, also reserve space for one gap before the button
                splitButtonReservation += gapSpacing;
            }
        }
        availableWidth -= splitButtonReservation;
        
        // Calculate the total width that will be consumed by margins between flowChildren
        let totalMarginWidth = 0;
        if (numFlowChildren > 1) {
            totalMarginWidth = (numFlowChildren - 1) * gapSpacing;
        }
        
        // This is the width purely for the content of the flowChildren themselves
        let netWidthForFlowChildrenContent = availableWidth - totalMarginWidth;

        if (netWidthForFlowChildrenContent <= 0 && numFlowChildren > 0) {
            // Fallback if calculated space is too small (e.g. due to large gaps and many tabs)
            netWidthForFlowChildrenContent = numFlowChildren * tabMinWidth;
        }

        let childBaseWidth = tabMinWidth;
        if (numFlowChildren > 0) {
            childBaseWidth = Math.floor(netWidthForFlowChildrenContent / numFlowChildren);
        }
        // Ensure base width is within defined min/max
        childBaseWidth = Math.max(tabMinWidth, Math.min(childBaseWidth, tabMaxWidth));

        let remainderWidth = 0;
        if (numFlowChildren > 0) {
            remainderWidth = netWidthForFlowChildrenContent - (childBaseWidth * numFlowChildren);
            if (remainderWidth < 0) remainderWidth = 0;
        }

        for (let i = 0; i < flowChildren.length; i++) {
            const child = flowChildren[i];
            let currentChildActualWidth = childBaseWidth;

            if (remainderWidth > 0) { // Distribute any remaining width
                currentChildActualWidth++;
                remainderWidth--;
            }
            // Final check on width (should already be constrained but good for safety)
            currentChildActualWidth = Math.max(tabMinWidth, Math.min(currentChildActualWidth, tabMaxWidth));

            child.set_width(currentChildActualWidth);
            
            let dynamicStyle = `border-radius: ${tabCornerRadius}px ${tabCornerRadius}px 0 0;`;
            if (i > 0) { // Add margin-left for children after the first to create spacing
                dynamicStyle += ` margin-left: ${gapSpacing}px;`;
            }
            child.set_style(dynamicStyle);
            
            // We are NOT using child.set_x() here for flowChildren.
            // St.BoxLayout will use the margin-left and its own packing logic.
            // We still vertically center them.
            child.set_y(Math.floor((allocation.get_height() - child.get_height()) / 2));
            
            const tabData = this._tabsData.find(td => td.actor === child);
            if (tabData && tabData.labelActor) {
                const labelMax = currentChildActualWidth - TAB_INTERNAL_NON_LABEL_WIDTH; // TAB_INTERNAL_NON_LABEL_WIDTH = 50 [cite: 700]
                tabData.labelActor.set_style(`max-width: ${Math.max(0, labelMax)}px`);
            }
        }

        // Position the split button manually from the right, as it's not part of the flow
        if (this._splitButton && this._splitButton.visible) {
            const buttonNaturalWidth = this._splitButton.get_preferred_width(-1)[1];
            this._splitButton.set_width(buttonNaturalWidth);
            // Position from the right edge of the TabBar's allocation
            const buttonX = allocation.get_width() - themeNode.get_padding(St.Side.RIGHT) - buttonNaturalWidth;
            this._splitButton.set_x(buttonX); // Manual X position
            this._splitButton.set_y(Math.floor((allocation.get_height() - this._splitButton.get_height()) / 2)); // Vertical center
        }
    }

    addWindow(win) {
        if (this._destroyed || this._tabsData.some(td => td.window === win)) { 
            if (!this._destroyed) this.highlightWindow(win); 
            return; 
        }

        const app = this._windowTracker.get_window_app(win); 
        const { actor, labelActor } = this._buildTabActor(win, app); 
        actor.hide(); 

        GLib.idle_add(GLib.PRIORITY_DEFAULT_IDLE, () => {
            if (this._destroyed) { 
                actor.destroy(); 
                return GLib.SOURCE_REMOVE; 
            }

            const compositorPrivate = 
                win.get_compositor_private?.(); 
            if (!compositorPrivate) { 
                actor.destroy();  
                return GLib.SOURCE_REMOVE; 
            }
            
            if (this._splitButton && this._splitButton.get_parent() === this) {
                this.insert_child_below(actor, this._splitButton);
            } else {
                this.add_child(actor);
            }
            
            const unmanageId = win.connect('unmanaging', () => this.removeWindow(win)); 
            this._tabsData.push({ window: win, actor, labelActor, unmanageId }); 
            this._tabDragger.initPointerHandlers(actor, win); 

            if (!this.visible && this._tabsData.length > 0) { 
                this.visible = true;  
            }
            
            this._needsLayoutUpdate = true; 
            this.queue_relayout();  

            GLib.idle_add(GLib.PRIORITY_DEFAULT_IDLE, () => {
                if (this._destroyed || actor.get_parent() !== this) { 
                    return GLib.SOURCE_REMOVE; 
                }
                
                actor.show();  
                this.highlightWindow(win);  
                this._onTabClicked(win);  

                if (actor.can_focus && actor.get_stage() && actor.get_paint_visibility()) { 
                     actor.grab_key_focus(); 
                }
                return GLib.SOURCE_REMOVE; 
            });
            return GLib.SOURCE_REMOVE; 
        });
    }

    _onTabCloseRequested(window) {
        if (this._destroyed) return; 
        window.delete(global.get_current_time()); 
    }

    removeWindow(win) {
        if (this._destroyed) return; 
        const idx = this._tabsData.findIndex(td => td.window === win); 
        if (idx < 0) return; 

        const tabData = this._tabsData[idx]; 
        if (this._tabDragger.isDragging() && this._tabDragger.getDraggedActor() === tabData.actor) { 
            this._tabDragger.cancelDrag(true); 
        }

        if (tabData.unmanageId && tabData.window) { 
            const compositorPrivate = tabData.window.get_compositor_private?.(); 
            if (compositorPrivate) { 
                try {
                    tabData.window.disconnect(tabData.unmanageId); 
                } catch (e) { 
                } 
            }
        }
        tabData.unmanageId = 0; 
        if (tabData.actor._pressTimeoutId) { 
            GLib.Source.remove(tabData.actor._pressTimeoutId); 
            tabData.actor._pressTimeoutId = 0; 
        }
        tabData.actor._pressEventDetails = null; 
        if (tabData.actor.get_parent() === this) { 
            this.remove_child(tabData.actor); 
        }
        tabData.actor.destroy(); 
        this._tabsData.splice(idx, 1); 
        if (this._tabsData.length === 0 && (!this._splitButton || !this._splitButton.visible)) {
            this.visible = false;
        } else if (this._tabsData.length === 0 && this._splitButton && this._splitButton.visible) {
            this.visible = true;
        }
        this._needsLayoutUpdate = true; 
        this.queue_relayout(); 
    }

    highlightWindow(win) {
        if (this._destroyed) return; 
        this._tabsData.forEach(({ window: w, actor }) => { 
            if (w === win) { 
                actor.add_style_pseudo_class('active'); 
            } else { 
                actor.remove_style_pseudo_class('active'); 
            }
        });
    }

    _buildTabActor(win, app) {
        const actor = new St.Button({
            style_class: 'zone-tab',
            reactive: true,
            can_focus: true,
        }); 
        const box = new St.BoxLayout({
            vertical: false,
            style_class: 'zone-tab-content',
            x_expand: true
        }); 
        actor.set_child(box); 

        if (app?.get_icon()) { 
            box.add_child(new St.Icon({ 
                gicon: app.get_icon(), 
                icon_size: this._settingsMgr.getTabIconSize(), 
                style_class: 'zone-tab-app-icon' 
            }));
        }
        const fs = this._settingsMgr.getTabFontSize(); 
        const title = this._makeLabelText(win, app); 
        const labelActor = new St.Label({ 
            text: title, 
            y_align: Clutter.ActorAlign.CENTER 
        });
        labelActor.clutter_text.set_ellipsize(Pango.EllipsizeMode.END); 
        labelActor.set_style(`font-size:${fs}px;`); 
        labelActor.x_expand = true; 
        box.add_child(labelActor); 

        const closeButton = new St.Button({
            style_class: 'zone-tab-close-button',
            can_focus: true,
            reactive: true,
        }); 
        closeButton.set_child(new St.Icon({ 
            icon_name: 'window-close-symbolic', 
            icon_size: this._settingsMgr.getTabCloseButtonIconSize(), 
        }));
        closeButton.connect('clicked', () => { 
            this._onTabCloseRequested(win); 
            return Clutter.EVENT_STOP; 
        });
        box.add_child(closeButton); 

        actor._tabWindow = win; 
        actor._pressTimeoutId = 0;  

        return { actor, labelActor }; 
    }

    _makeLabelText(win, app) {
        if (app) return app.get_name() || 
            win.get_title() || 'Untitled'; 
        const c = win.get_wm_class(); 
        return c ? c.replace(/[-_.]+/g, ' ').replace(/\b\w/g, m => m.toUpperCase()) : win.get_title() || 'Untitled'; 
    }

    destroy() {
        if (this._destroyed) return; 
        this._destroyed = true; 

        if (this._splitButton) { 
            this._splitButton.destroy(); 
            this._splitButton = null; 
            this._splitButtonIcon = null;
        }
        this._tabDragger.destroy(); 
        this._tabsData.forEach(({ unmanageId, window, actor }) => { 
            if (unmanageId && window) { 
                const compositorPrivate = window.get_compositor_private?.(); 
                if (compositorPrivate) { 
                    try { window.disconnect(unmanageId); } catch (e) { /* log error */ } 
                }
            }
            if (actor._pressTimeoutId) { 
                GLib.Source.remove(actor._pressTimeoutId); 
            }
        });
        this._tabsData = []; 
        
        super.destroy(); 
    }

    refreshTabVisuals() {
        if (this._destroyed) return; 
        this._tabsData.forEach(tabData => { 
            const { actor, window } = tabData;  
            const labelActor = tabData.labelActor; 
            const app = this._windowTracker.get_window_app(window); 

            const box = actor.get_child(); 
            if (!box) return;  

            let appIconActor = null; 
            let closeButtonActor = null; 

            box.get_children().forEach(child => {  
                if (child instanceof St.Icon && child.style_class === 'zone-tab-app-icon') { 
                    appIconActor = child; 
                } else if (child instanceof St.Button && child.style_class === 'zone-tab-close-button') {  
                    closeButtonActor = child; 
                }
            });

            if (appIconActor) box.remove_child(appIconActor); 
            if (app?.get_icon()) { 
                const newAppIcon = new St.Icon({ 
                    gicon: app.get_icon(), 
                    icon_size: this._settingsMgr.getTabIconSize(), 
                    style_class: 'zone-tab-app-icon' 
                });
                if (labelActor) { 
                    box.insert_child_below(newAppIcon, labelActor); 
                } else {  
                    box.add_child(newAppIcon); 
                }
            }

            if (labelActor) {  
                const fs = this._settingsMgr.getTabFontSize(); 
                labelActor.set_style(`font-size:${fs}px;`); 
            }

            if (closeButtonActor) { 
                const oldIcon = closeButtonActor.get_child(); 
                if (oldIcon) oldIcon.destroy(); 
                closeButtonActor.set_child(new St.Icon({ 
                    icon_name: 'window-close-symbolic', 
                    icon_size: this._settingsMgr.getTabCloseButtonIconSize(), 
                }));
            }
        });

        this._updateSplitButtonIcon();

        this._needsLayoutUpdate = true; 
        this.queue_relayout(); 
    }
}



===== FILE: ./modules/SettingsManager.js =====
// modules/SettingsManager.js

import Gio from 'gi://Gio';
import GLib from 'gi://GLib'; //
const ZONE_SETTINGS_KEY                     = 'zones'; //
const ENABLE_ZONING_KEY                     = 'enable-auto-zoning'; //
const RESTORE_ON_UNTILE_KEY                 = 'restore-original-size-on-untile'; //
const TILE_NEW_WINDOWS_KEY                  = 'tile-new-windows'; //
const HIGHLIGHT_ON_HOVER_KEY                = 'highlight-on-hover'; //
const CYCLE_ACCELERATOR_KEY                 = 'cycle-zone-windows-accelerator'; //
const CYCLE_BACKWARD_ACCELERATOR_KEY        = 'cycle-zone-windows-backward-accelerator'; //
const TAB_BAR_HEIGHT_KEY                    = 'tab-bar-height'; //
const TAB_FONT_SIZE_KEY                     = 'tab-font-size'; //
const ZONE_GAP_SIZE_KEY                     = 'zone-gap-size'; //
const TAB_ICON_SIZE_KEY                     = 'tab-icon-size'; //
const TAB_CORNER_RADIUS_KEY                 = 'tab-corner-radius'; //
const TAB_CLOSE_BUTTON_ICON_SIZE_KEY        = 'tab-close-button-icon-size'; //
const TAB_SPACING_KEY                       = 'tab-spacing'; //
const TAB_MIN_WIDTH_KEY                     = 'tab-min-width'; //
const TAB_MAX_WIDTH_KEY                     = 'tab-max-width'; //
const SNAP_EVASION_KEY                      = 'snap-evasion-key'; //
const DEFAULT_ZONES_FILENAME                = 'default_zones.json'; //
const log = (msg) => console.log(`[AutoZoner.SettingsManager] ${msg}`); //

export class SettingsManager {
    constructor(gsettings, extensionPath) {
        this._gsettings       = gsettings; //
        this._extensionPath   = extensionPath; //
        this._zones           = []; //
        this._signalHandlers  = new Map(); //

        this._loadDefaultZonesFromFileIfNeeded(); //
        this._loadZonesFromGSettings(); //

        this._connectSettingChange(ZONE_SETTINGS_KEY, () => this._loadZonesFromGSettings()); //
        this._connectSettingChange(ENABLE_ZONING_KEY, () => log('Enable auto zoning changed')); //
        this._connectSettingChange(RESTORE_ON_UNTILE_KEY, () => log('Restore on untile changed')); //
        this._connectSettingChange(TILE_NEW_WINDOWS_KEY, () => log('Tile new windows changed')); //
        this._connectSettingChange(HIGHLIGHT_ON_HOVER_KEY, () => log('Highlight on hover changed')); //
        this._connectSettingChange(CYCLE_ACCELERATOR_KEY, () => log('Cycle accelerator changed')); //
        this._connectSettingChange(CYCLE_BACKWARD_ACCELERATOR_KEY, () => log('Backward cycle accelerator changed')); //
        this._connectSettingChange(TAB_BAR_HEIGHT_KEY, () => log('Tab bar height changed')); //
        this._connectSettingChange(TAB_FONT_SIZE_KEY, () => log('Tab font size changed')); //
        this._connectSettingChange(ZONE_GAP_SIZE_KEY, () => log('Zone gap size changed')); //
        this._connectSettingChange(TAB_ICON_SIZE_KEY, () => log('Tab icon size changed')); //
        this._connectSettingChange(TAB_CORNER_RADIUS_KEY, () => log('Tab corner radius changed')); //
        this._connectSettingChange(TAB_CLOSE_BUTTON_ICON_SIZE_KEY, () => log('Tab close button icon size changed')); //
        this._connectSettingChange(TAB_SPACING_KEY, () => log('Tab spacing changed')); //
        this._connectSettingChange(TAB_MIN_WIDTH_KEY, () => log('Tab min width changed')); //
        this._connectSettingChange(TAB_MAX_WIDTH_KEY, () => log('Tab max width changed')); //
        this._connectSettingChange(SNAP_EVASION_KEY, () => log(`Snap evasion key changed to: ${this.getSnapEvasionKeyName()}`)); //
    }

    _loadDefaultZonesFromFileIfNeeded() {
        log(`Attempting to load zones from ${DEFAULT_ZONES_FILENAME}…`); //
        const file = Gio.File.new_for_path(GLib.build_filenamev([this._extensionPath, DEFAULT_ZONES_FILENAME])); //
        try { //
            if (file.query_exists(null)) { //
                const [ok, contents] = file.load_contents(null); //
                if (ok) { //
                    const json = new TextDecoder().decode(contents).trim(); //
                    if (json.startsWith('[') && json.endsWith(']')) { //
                        const current = this._gsettings.get_string(ZONE_SETTINGS_KEY); //
                        if (current !== json) { //
                            this._gsettings.set_string(ZONE_SETTINGS_KEY, json); //
                            log(`Default zones imported from file.`); //
                        }
                    } else { //
                        log(`Default file does not contain a JSON array.`); //
                    }
                } else { //
                    log(`Could not read ${DEFAULT_ZONES_FILENAME}.`); //
                }
            }
        } catch (e) { //
            log(`Error loading default zones: ${e}`); //
        }
    }

    _loadZonesFromGSettings() {
        try { //
            const str = this._gsettings.get_string(ZONE_SETTINGS_KEY); //
            const arr = JSON.parse(str); //
            this._zones = Array.isArray(arr) ? arr : []; //
            log(`Loaded ${this._zones.length} zones.`); //
        } catch (e) { //
            log(`Failed to parse zones JSON: ${e}`); //
            this._zones = []; //
        }
    }

    _connectSettingChange(key, callback) {
        const id = this._gsettings.connect(`changed::${key}`, callback); //
        if (!this._signalHandlers.has(this._gsettings)) //
            this._signalHandlers.set(this._gsettings, []); //
        this._signalHandlers.get(this._gsettings).push(id); //
    }

    getGSettingObject() {
        return this._gsettings; //
    }

    getExtensionPath() { // New getter
        return this._extensionPath;
    }

    getZones() {
        return this._zones; //
    }

    isZoningEnabled() {
        return this._gsettings.get_boolean(ENABLE_ZONING_KEY); //
    }

    isRestoreOnUntileEnabled() {
        return this._gsettings.get_boolean(RESTORE_ON_UNTILE_KEY); //
    }

    isTileNewWindowsEnabled() {
        return this._gsettings.get_boolean(TILE_NEW_WINDOWS_KEY); //
    }

    isHighlightOnHoverEnabled() {
        return this._gsettings.get_boolean(HIGHLIGHT_ON_HOVER_KEY); //
    }

    get cycleZoneWindowsAccelerator() {
        const arr = this._gsettings.get_strv(CYCLE_ACCELERATOR_KEY); //
        return arr.length > 0 ? arr[0] : ''; //
    }

    get cycleZoneWindowsBackwardAccelerator() {
        const arr = this._gsettings.get_strv(CYCLE_BACKWARD_ACCELERATOR_KEY); //
        return arr.length > 0 ? arr[0] : ''; //
    }

    getTabBarHeight() {
        return this._gsettings.get_int(TAB_BAR_HEIGHT_KEY); //
    }

    getTabFontSize() {
        return this._gsettings.get_int(TAB_FONT_SIZE_KEY); //
    }

    getZoneGapSize() {
        return this._gsettings.get_int(ZONE_GAP_SIZE_KEY); //
    }

    getTabIconSize() {
        return this._gsettings.get_int(TAB_ICON_SIZE_KEY); //
    }

    getTabCornerRadius() {
        return this._gsettings.get_int(TAB_CORNER_RADIUS_KEY); //
    }

    getTabCloseButtonIconSize() {
        return this._gsettings.get_int(TAB_CLOSE_BUTTON_ICON_SIZE_KEY); //
    }

    getTabSpacing() {
        return this._gsettings.get_int(TAB_SPACING_KEY); //
    }

    getTabMinWidth() {
        return this._gsettings.get_int(TAB_MIN_WIDTH_KEY); //
    }

    getTabMaxWidth() {
        return this._gsettings.get_int(TAB_MAX_WIDTH_KEY); //
    }

    getSnapEvasionKeyName() {
        return this._gsettings.get_string(SNAP_EVASION_KEY); //
    }

    destroy() {
        for (const [gobj, ids] of this._signalHandlers) { //
            ids.forEach(id => { //
                try { gobj.disconnect(id); } catch {} //
            });
        }
        this._signalHandlers.clear(); //
        log('Destroyed.'); //
    }
}



===== FILE: ./modules/ZoneHighlighter.js =====
import St from 'gi://St';
import GObject from 'gi://GObject';
import Clutter from 'gi://Clutter';
import * as Main from 'resource:///org/gnome/shell/ui/main.js';

const log = (msg) => console.log(`[AutoZoner.ZoneHighlighter] ${msg}`);

export class ZoneHighlighter extends St.Bin {
    static {
        GObject.registerClass(this);
    }

    constructor() {
        super({
            style_class: 'zone-highlight',
            visible: false,
            reactive: false,
            x_expand: false,
            y_expand: false,
            opacity: 0,
        });
        Main.uiGroup.add_child(this);
        // Ensure it's above most other things but below popups/menus if possible
        // This might need adjustment based on other UI elements.
        // Setting a high child index:
        if (Main.uiGroup.get_children().length > 1) {
             Main.uiGroup.set_child_above_sibling(this, Main.uiGroup.get_last_child());
        }
        this._isShowing = false; // Internal state to track intent
        log("Created and added to uiGroup.");
    }

    showAt(rect) {
        this.set_position(Math.round(rect.x), Math.round(rect.y));
        this.set_size(Math.round(rect.width), Math.round(rect.height));

        this._isShowing = true;
        if (!this.visible) {
            this.set_opacity(0); // Ensure opacity is 0 before showing for fade-in
            super.show(); // Use super.show() to bypass our custom hide logic
        }

        this.remove_all_transitions(); // Clear any ongoing transitions
        this.ease({
            opacity: 255,
            duration: 100, // Short duration for responsiveness
            mode: Clutter.AnimationMode.EASE_OUT_QUAD,
        });
    }

    hideNow() { // An immediate hide without fade
        this._isShowing = false;
        this.remove_all_transitions();
        this.set_opacity(0);
        super.hide();
    }

    requestHide() { // Fade out hide
        this._isShowing = false;
        if (this.visible) {
            this.remove_all_transitions();
            this.ease({
                opacity: 0,
                duration: 150, // Slightly longer fade-out
                mode: Clutter.AnimationMode.EASE_OUT_QUAD,
                onComplete: () => {
                    // Only hide if we still intend to be hidden (i.e., no new showAt was called)
                    if (!this._isShowing && this.opacity === 0) {
                        super.hide();
                    }
                }
            });
        }
    }

    get isShowingIntent() { // Getter for external modules to check intent
        return this._isShowing;
    }


    destroy() {
        log("Destroying...");
        this.remove_all_transitions();
        if (this.get_parent()) {
            this.get_parent().remove_child(this);
        }
        super.destroy();
    }
}



===== FILE: ./modules/HighlightManager.js =====
// modules/HighlightManager.js

import GLib from 'gi://GLib';
import Mtk from 'gi://Mtk';
import * as Main from 'resource:///org/gnome/shell/ui/main.js';
import { ZoneHighlighter } from './ZoneHighlighter.js';
import { ZoneDetector } from './ZoneDetector.js';
import Clutter from 'gi://Clutter';

const HIGHLIGHT_TIMER_INTERVAL = 30;
const log = (msg) => console.log(`[AutoZoner.HighlightManager] ${msg}`);

export class HighlightManager {
    constructor(settingsManager) {
        this._settingsManager = settingsManager;
        this._zoneDetector = new ZoneDetector();
        this._zoneHighlighters = new Map();
        this._highlightTimerId = 0;
        this._currentlyHighlightedInfo = null;

        this._initZoneHighlighters();
        log("Initialized.");
    }

    _getEvasionKeyMask() {
        const keyName = this._settingsManager.getSnapEvasionKeyName();
        switch (keyName?.toLowerCase()) {
            case 'control':
                return Clutter.ModifierType.CONTROL_MASK;
            case 'alt':
                return Clutter.ModifierType.MOD1_MASK;
            case 'shift':
                return Clutter.ModifierType.SHIFT_MASK;
            case 'super':
                return Clutter.ModifierType.MOD4_MASK;
            case 'disabled':
            default:
                return 0;
        }
    }

    _initZoneHighlighters() {
        this._destroyZoneHighlighters();
        Main.layoutManager.monitors.forEach((monitor, index) => {
            const highlighter = new ZoneHighlighter();
            this._zoneHighlighters.set(index, highlighter);
        });
        log(`Initialized ${this._zoneHighlighters.size} highlighters.`);
    }

    _destroyZoneHighlighters() {
        this._zoneHighlighters.forEach(highlighter => highlighter.destroy());
        this._zoneHighlighters.clear();
        log("Destroyed all highlighters.");
    }

    _getMonitorWorkArea(monitorIndex) {
        if (monitorIndex < 0 || monitorIndex >= Main.layoutManager.monitors.length) {
            return Main.layoutManager.getWorkAreaForMonitor(Main.layoutManager.primaryIndex);
        }
        return Main.layoutManager.getWorkAreaForMonitor(monitorIndex);
    }

    _updateHighlightOnDrag() {
        if (this._highlightTimerId === 0) return GLib.SOURCE_REMOVE;

        const evasionKeyMask = this._getEvasionKeyMask();
        const [, , mods] = global.get_pointer();
        const isEvasionKeyHeld = evasionKeyMask !== 0 && (mods & evasionKeyMask) !== 0;

        if (isEvasionKeyHeld) {
            if (this._currentlyHighlightedInfo) {
                this._currentlyHighlightedInfo.highlighter.requestHide();
                this._currentlyHighlightedInfo = null;
            }
            return GLib.SOURCE_CONTINUE;
        }

        if (!this._settingsManager.isHighlightOnHoverEnabled()) {
            if (this._currentlyHighlightedInfo) {
                this._currentlyHighlightedInfo.highlighter.requestHide();
                this._currentlyHighlightedInfo = null;
            }
            return GLib.SOURCE_REMOVE;
        }

        const [pointerX, pointerY] = global.get_pointer();
        const pointerMonitorIndex = global.display.get_monitor_index_for_rect(new Mtk.Rectangle({ x: pointerX, y: pointerY, width: 1, height: 1 }));
        
        if (pointerMonitorIndex === -1) {
            if (this._currentlyHighlightedInfo) {
                this._currentlyHighlightedInfo.highlighter.requestHide();
                this._currentlyHighlightedInfo = null;
            }
            return GLib.SOURCE_CONTINUE;
        }

        const zones = this._settingsManager.getZones();
        const hoveredZone = this._zoneDetector.findTargetZone(zones, {x: pointerX, y: pointerY}, pointerMonitorIndex);
        const currentHighlighterOnPointerMonitor = this._zoneHighlighters.get(pointerMonitorIndex);

        if (hoveredZone) {
            if (!this._currentlyHighlightedInfo ||
                this._currentlyHighlightedInfo.monitorIndex !== pointerMonitorIndex ||
                (this._currentlyHighlightedInfo.zone.name || JSON.stringify(this._currentlyHighlightedInfo.zone)) !== (hoveredZone.name || JSON.stringify(hoveredZone))) {

                if (this._currentlyHighlightedInfo && this._currentlyHighlightedInfo.highlighter) {
                   this._currentlyHighlightedInfo.highlighter.requestHide();
                }

                if (currentHighlighterOnPointerMonitor) {
                    const workArea = this._getMonitorWorkArea(pointerMonitorIndex);
                    const absoluteZoneRect = {
                        x: workArea.x + hoveredZone.x, y: workArea.y + hoveredZone.y,
                        width: hoveredZone.width, height: hoveredZone.height
                    };
                    currentHighlighterOnPointerMonitor.showAt(absoluteZoneRect);
                    this._currentlyHighlightedInfo = {
                        monitorIndex: pointerMonitorIndex,
                        zone: hoveredZone,
                        highlighter: currentHighlighterOnPointerMonitor
                    };
                } else {
                     this._currentlyHighlightedInfo = null;
                }
            }
        } else {
            if (this._currentlyHighlightedInfo) {
                if (this._currentlyHighlightedInfo.monitorIndex === pointerMonitorIndex) {
                    this._currentlyHighlightedInfo.highlighter.requestHide();
                    this._currentlyHighlightedInfo = null;
                }
                else if (this._currentlyHighlightedInfo.monitorIndex !== pointerMonitorIndex) {
                    this._currentlyHighlightedInfo.highlighter.requestHide();
                    this._currentlyHighlightedInfo = null;
                }
            }
        }
        return GLib.SOURCE_CONTINUE;
    }

    startUpdating() {
        const evasionKeyMask = this._getEvasionKeyMask();
        const [, , mods] = global.get_pointer();
        const isEvasionKeyHeld = evasionKeyMask !== 0 && (mods & evasionKeyMask) !== 0;

        if (isEvasionKeyHeld) {
            const keyName = this._settingsManager.getSnapEvasionKeyName();
            log(`${keyName} key is held; not starting highlight updates.`);
            this._hideAllActiveHighlighters();
            if (this._highlightTimerId > 0) {
                GLib.Source.remove(this._highlightTimerId);
                this._highlightTimerId = 0;
            }
            return;
        }

        if (this._settingsManager.isHighlightOnHoverEnabled()) {
            if (this._highlightTimerId > 0) GLib.Source.remove(this._highlightTimerId);
            this._highlightTimerId = GLib.timeout_add(GLib.PRIORITY_DEFAULT_IDLE, HIGHLIGHT_TIMER_INTERVAL, this._updateHighlightOnDrag.bind(this));
            log("Started highlight updates.");
        } else {
            log("Highlighting disabled, not starting updates.");
            if (this._highlightTimerId > 0) {
                GLib.Source.remove(this._highlightTimerId);
                this._highlightTimerId = 0;
            }
             this._hideAllActiveHighlighters();
        }
    }

    stopUpdating() {
        if (this._highlightTimerId > 0) {
            GLib.Source.remove(this._highlightTimerId);
            this._highlightTimerId = 0;
        }
        this._hideAllActiveHighlighters();
        this._currentlyHighlightedInfo = null;
        log("Stopped highlight updates.");
    }

    _hideAllActiveHighlighters() {
        this._zoneHighlighters.forEach(highlighter => {
            if (highlighter.isShowingIntent || highlighter.visible || highlighter.opacity > 0) {
                highlighter.requestHide();
            }
        });
    }

    reinitHighlighters() {
        this.stopUpdating();
        this._initZoneHighlighters();
    }

    destroy() {
        this.stopUpdating();
        this._destroyZoneHighlighters();
        log("Destroyed.");
    }
}



===== FILE: ./modules/Indicator.js =====
import St from 'gi://St';
import * as PanelMenu from 'resource:///org/gnome/shell/ui/panelMenu.js';
import * as PopupMenu from 'resource:///org/gnome/shell/ui/popupMenu.js';
import * as Main from 'resource:///org/gnome/shell/ui/main.js'; // MOVED TO TOP LEVEL
import { gettext as _ } from 'resource:///org/gnome/shell/extensions/extension.js';

const ENABLE_ZONING_KEY = 'enable-auto-zoning';
const log = (msg) => console.log(`[AutoZoner.Indicator] ${msg}`);

export class Indicator {
    constructor(uuid, settingsManager, extensionObject) {
        this._uuid = uuid;
        this._settingsManager = settingsManager;
        this._extensionObject = extensionObject;
        this._indicator = null;
        this._toggleItemSignalId = 0;
        this._prefsItemSignalId = 0;

        this._init();
        log("Initialized.");
    }

    _init() {
        this._indicator = new PanelMenu.Button(0.5, _('Auto Zoner'), false);
        const icon = new St.Icon({
            icon_name: 'view-grid-symbolic',
            style_class: 'system-status-icon',
        });
        this._indicator.add_child(icon);
        this._buildMenu();
        Main.panel.addToStatusArea(this._uuid, this._indicator); // Main is imported at top
    }

    _buildMenu() {
        if (!this._indicator) return;
        this._indicator.menu.removeAll();

        const zoningEnabled = this._settingsManager.isZoningEnabled();
        const toggleItem = new PopupMenu.PopupSwitchMenuItem(
            _("Enable Auto Zoning"),
            zoningEnabled
        );

        // Ensure we don't double-connect if _buildMenu is called multiple times
        if(this._toggleItemSignalId > 0) {
            try { if (toggleItem.is_connected(this._toggleItemSignalId)) toggleItem.disconnect(this._toggleItemSignalId); }
            catch(e) { /* ignore */ }
        }
        this._toggleItemSignalId = toggleItem.connect('toggled', (item) => {
            this._settingsManager.getGSettingObject().set_boolean(ENABLE_ZONING_KEY, item.state);
        });
        this._indicator.menu.addMenuItem(toggleItem);

        this._indicator.menu.addMenuItem(new PopupMenu.PopupSeparatorMenuItem());

        const prefsItem = new PopupMenu.PopupMenuItem(_('Settings'));
         if(this._prefsItemSignalId > 0) {
            try { if (prefsItem.is_connected(this._prefsItemSignalId)) prefsItem.disconnect(this._prefsItemSignalId); }
            catch(e) { /* ignore */ }
        }
        this._prefsItemSignalId = prefsItem.connect('activate', () => {
            this._extensionObject.openPreferences();
        });
        this._indicator.menu.addMenuItem(prefsItem);
    }

    updateToggleState() {
        if (!this._indicator || !this._indicator.menu) return;
        const menuItems = this._indicator.menu._getMenuItems();
        if (menuItems && menuItems.length > 0 && menuItems[0] instanceof PopupMenu.PopupSwitchMenuItem) {
            // Temporarily disconnect to prevent feedback loop if setToggleState itself emits 'toggled'
            const toggleItem = menuItems[0];
            const wasConnected = this._toggleItemSignalId > 0 && toggleItem.is_connected(this._toggleItemSignalId);
            if (wasConnected) toggleItem.disconnect(this._toggleItemSignalId);
            
            toggleItem.setToggleState(this._settingsManager.isZoningEnabled());
            
            if (wasConnected) { // Reconnect if it was previously connected
                 this._toggleItemSignalId = toggleItem.connect('toggled', (item) => {
                    this._settingsManager.getGSettingObject().set_boolean(ENABLE_ZONING_KEY, item.state);
                });
            }
        }
    }

    destroy() {
        // Attempt to disconnect signals from menu items before destroying the indicator
        if (this._indicator && this._indicator.menu) {
            const menuItems = this._indicator.menu._getMenuItems();
            if (this._toggleItemSignalId > 0 && menuItems && menuItems.length > 0 && menuItems[0] instanceof PopupMenu.PopupSwitchMenuItem) {
                const toggleItem = menuItems[0];
                try { if(toggleItem.is_connected(this._toggleItemSignalId)) toggleItem.disconnect(this._toggleItemSignalId); } catch(e) {/*ignore*/}
            }
             if (this._prefsItemSignalId > 0 && menuItems && menuItems.length > 2 && menuItems[2] instanceof PopupMenu.PopupMenuItem) { // Index 2 if separator is present
                const prefsItem = menuItems[2];
                 try { if(prefsItem.is_connected(this._prefsItemSignalId)) prefsItem.disconnect(this._prefsItemSignalId); } catch(e) {/*ignore*/}
            }
        }
        this._toggleItemSignalId = 0;
        this._prefsItemSignalId = 0;

        if (this._indicator) {
            this._indicator.destroy();
            this._indicator = null;
        }
        log("Destroyed.");
    }
}



===== FILE: ./prefs.js =====
// prefs.js
import Adw from 'gi://Adw'; // [cite: 511]
import Gdk from 'gi://Gdk'; // [cite: 512]
import { ExtensionPreferences, gettext as _ } from 'resource:///org/gnome/Shell/Extensions/js/extensions/prefs.js'; // [cite: 513]

// Import new preference group modules
import { createGeneralSettingsGroup } from './preferences/GeneralSettingsGroup.js';
import { createTabBarSettingsGroup } from './preferences/TabBarSettingsGroup.js';
import { ZoneDefinitionsGroup } from './preferences/ZoneDefinitionsGroup.js';

const SNAP_EVASION_KEY = 'snap-evasion-key'; // [cite: 530]
const log = msg => console.log(`[AutoZonerPrefs] ${msg}`); // [cite: 531]


export default class AutoZonerPrefs extends ExtensionPreferences {
    fillPreferencesWindow(window) {
        this._settings = this.getSettings(); // [cite: 544]
        this._window = window; // [cite: 545]
        this._evasionKeySignalId = 0;

        const display = Gdk.Display.get_default(); // [cite: 545]
        // CORRECTED LINE:
        const monitorCount = display?.get_monitors().get_n_items() || 1; // [cite: 545]
        
        const page = new Adw.PreferencesPage(); // [cite: 546]
        window.add(page); // [cite: 547]

        // General Settings Group
        const { group: generalGroup, evasionKeySettingChangedId } = createGeneralSettingsGroup(this._settings); // [cite: 547]
        page.add(generalGroup);
        this._evasionKeySignalId = evasionKeySettingChangedId;


        // Tab Bar Adjustments Group
        const tabBarGroup = createTabBarSettingsGroup(this._settings); // [cite: 584]
        page.add(tabBarGroup);

        // Zone Definitions Group
        this._zoneDefinitionsManager = new ZoneDefinitionsGroup(this._settings, monitorCount, window);
        page.add(this._zoneDefinitionsManager.getWidget());


        // Disconnect the signal when the preferences window is destroyed
        if (window && typeof window.connect === 'function') { // [cite: 610]
            window.connect('close-request', () => { // Or 'destroy' // [cite: 610]
                if (this._settings && this._evasionKeySignalId > 0) { // [cite: 610]
                    try {
                        this._settings.disconnect(this._evasionKeySignalId); // [cite: 611]
                        this._evasionKeySignalId = 0;
                    } catch (e) {
                        log(`Error disconnecting evasionKeySettingChangedId: ${e}`); // [cite: 611]
                    }
                }
            });
        }
    }
}



===== FILE: ./stylesheet.css =====
/* stylesheet.css for Auto Zoner Extension */

/* Zone Highlighter */
.zone-highlight {
    background-color: rgba(78, 154, 249, 0.2); /* [cite: 756] */
    border: 2px solid rgba(78, 154, 249, 0.6); /* [cite: 756] */
    border-radius: 6px; /* [cite: 756] */
}

/* Main Tab Bar Container */
.zone-tab-bar {
    background-color: rgba(0, 0, 0, 0.15); /* [cite: 757] */
    border-bottom: 1px solid rgba(0, 0, 0, 0.3); /* [cite: 757] */
    height: 32px; /* This can be seen as a fallback or default if not overridden by JS/Settings */ /* [cite: 757] */
    transition: opacity 200ms ease-out; /* [cite: 757] */
    z-index: 999; /* [cite: 758] */
}

/* Individual Tab (St.Button) */
.zone-tab {
    background-color: rgba(50, 50, 50, 1); /* [cite: 758] */
    color: #ffffff; /* [cite: 759] */
    border-radius: 4px 4px 0 0; /* Fallback, overridden by inline style from TabBar.js for corners */ /* [cite: 759] */
    padding: 2px 6px; /* [cite: 759] */
    min-height: 24px; /* [cite: 760] */
    border: 1px solid rgba(20,20,20,0.5); /* [cite: 760] */
    border-bottom-width: 0; /* [cite: 760] */
}

.zone-tab:hover {
    background-color: rgba(70, 70, 70, 1); /* [cite: 760] */
}

.zone-tab:active,
.zone-tab:focus,
.zone-tab.active {
    background-color: rgba(78, 154, 249, 1); /* [cite: 761] */
    color: #ffffff; /* [cite: 762] */
}

/* Content Box within each Tab (St.BoxLayout holding icon, label, close button) */
.zone-tab-content {
    spacing: 5px; /* [cite: 762] */
    /* This is a default, tab spacing is now a setting affecting margins */ /* [cite: 763] */
}

/* App Icon within Tab */
.zone-tab-app-icon {
    /* Icon styling if needed, size is set in JS */
}

/* Close Button within Tab */
.zone-tab-close-button {
    padding: 2px; /* [cite: 763] */
    margin-left: 4px; /* [cite: 764] */
    border-radius: 12px; /* [cite: 764] */
    background-color: transparent; /* [cite: 764] */
    color: #aeaeae; /* [cite: 764] */
    border: none; /* [cite: 764] */
    box-shadow: none; /* [cite: 764] */
    min-width: 0; /* [cite: 764] */
    min-height: 0; /* [cite: 764] */
    transition: background-color 150ms ease-out, color 150ms ease-out; /* [cite: 765] */
}

.zone-tab-close-button StIcon {
    /* icon-size is set in JS */
}


.zone-tab-close-button:hover {
    background-color: rgba(255, 255, 255, 0.15); /* [cite: 765] */
    color: #ffffff; /* [cite: 766] */
}

.zone-tab-close-button:active {
    background-color: rgba(255, 255, 255, 0.25); /* [cite: 766] */
    color: #ffffff; /* [cite: 767] */
}

/* Styling for the visual slot placeholder during drag and drop */
.zone-tab-drag-slot {
    background-color: rgba(120, 120, 120, 0.2); /* [cite: 767] */
    border: 1px dashed rgba(200, 200, 200, 0.4); /* [cite: 768] */
    border-radius: 4px 4px 0 0; /* [cite: 768] */
    /* Should match tab corner radius ideally */ /* [cite: 769] */
}

/* Tab Bar Split Button */
.zone-tab-bar-split-button {
    padding: 3px;
    border-radius: 4px;
    background-color: transparent;
    color: #aeaeae; /* Default icon color */
    border: none;
    box-shadow: none;
    min-width: 24px; /* Ensure it's clickable */
    min-height: 24px;
}
.zone-tab-bar-split-button:hover {
    background-color: rgba(255, 255, 255, 0.1);
    color: #ffffff;
}

.zone-tab-bar-split-button StIcon { icon-size: 24px; }



===== FILE: ./default_zones.json =====
[
  {
    "monitorIndex": 0,
    "name": "Left",
    "x": 0,
    "y": 0,
    "width": 1800,
    "height": 1407
  },
  {
    "monitorIndex": 0,
    "name": "center",
    "x": 1800,
    "y": 0,
    "width": 1800,
    "height": 1407
  },
   {
    "monitorIndex": 0,
    "name": "Right",
    "x": 3600,
    "y": 0,
    "width": 1459,
    "height": 1407
  }
]



===== FILE: ./images/full.png =====
[BINARY FILE]



===== FILE: ./images/split.png =====
[BINARY FILE]



